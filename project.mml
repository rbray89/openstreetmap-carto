{
  "bounds": [
    -180,
    -85.05112877980659,
    180,
    85.05112877980659
  ],
  "center": [
    0,
    0,
    4
  ],
  "format": "png",
  "interactivity": false,
  "minzoom": 0,
  "maxzoom": 22,
  "srs": "+proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0.0 +k=1.0 +units=m +nadgrids=@null +wktext +no_defs +over",
  "Stylesheet": [
    "style.mss",
    "shapefiles.mss",
    "landcover.mss",
    "water.mss",
    "water-features.mss",
    "road-colors-generated.mss",
    "roads.mss",
    "power.mss",
    "placenames.mss",
    "buildings.mss",
    "stations.mss",
    "amenity-points.mss",
    "ferry-routes.mss",
    "aerialways.mss",
    "admin.mss",
    "addressing.mss"
  ],
  "Layer": [
    {
      "geometry": "polygon",
      "extent": [
        -157.99118261729797,
        -51.05303741160215,
        178.0338339830011,
        69.76985509228818
      ],
      "id": "world-builtup",
      "class": "",
      "Datasource": {
        "file": "data/ne_10m_urban_areas/ne_10m_urban_areas.shp",
        "type": "shape",
        "id": "world-builtup",
        "project": "openstreetmap-carto-bw",
        "srs": "+proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0.0 +k=1.0 +units=m +nadgrids=@null +wktext +no_defs +over"
      },
      "srs-name": "WGS84",
      "srs": "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs",
      "advanced": {},
      "layerId": "world-builtup",
      "layer": null
    },
    {
      "geometry": "polygon",
      "extent": [
        -179.9999999749438,
        -85.051,
        179.9999999749438,
        85.051
      ],
      "id": "world-water",
      "class": "",
      "Datasource": {
        "file": "data/simplified-water-polygons-complete-3857/simplified_water_polygons.shp",
        "type": "shape",
        "id": "world",
        "project": "openstreetmap-carto-bw",
        "srs": "+proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0.0 +k=1.0 +units=m +nadgrids=@null +wktext +no_defs +over"
      },
      "srs-name": "900913",
      "srs": "+proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0.0 +k=1.0 +units=m +nadgrids=@null +wktext +no_defs +over",
      "advanced": {},
      "layerId": "world-water",
      "layer": null
    },
    {
      "geometry": "polygon",
      "extent": [
        -180,
        -85.051,
        180,
        85.051
      ],
      "id": "world-hd-coast-poly",
      "class": "",
      "Datasource": {
        "file": "data/water-polygons-split-3857/water_polygons.shp",
        "type": "shape",
        "id": "world-hd-coast-poly",
        "project": "openstreetmap-carto-bw",
        "srs": "+proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0.0 +k=1.0 +units=m +nadgrids=@null +wktext +no_defs +over"
      },
      "srs-name": "900913",
      "srs": "+proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0.0 +k=1.0 +units=m +nadgrids=@null +wktext +no_defs +over",
      "advanced": {},
      "layerId": "world-hd-coast-poly",
      "layer": null
    },
    {
      "geometry": "polygon",
      "extent": [
        -165.96561893930925,
        -50.66962481837749,
        176.0938293028783,
        81.95527752537254
      ],
      "id": "world-nelakes",
      "class": "",
      "Datasource": {
        "file": "data/10m-lakes/10m-lakes.shp",
        "type": "shape",
        "id": "nelakes",
        "project": "openstreetmap-carto-bw",
        "srs": ""
      },
      "layer": null,
      "srs-name": "900913",
      "srs": "+proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0.0 +k=1.0 +units=m +nadgrids=@null +wktext +no_defs +over",
      "advanced": {},
      "layerId": "world-nelakes"
    },
    {
      "geometry": "linestring",
      "extent": [
        -164.90349121093752,
        -52.1577450500059,
        177.21118164062506,
        75.79347565311913
      ],
      "id": "world-nerivers",
      "class": "",
      "Datasource": {
        "type": "shape",
        "file": "data/10m-rivers-lake-centerlines-scale-ranks/10m-rivers-lake-centerlines-scale-ranks.shp"
      },
      "layer": null,
      "srs-name": "900913",
      "srs": "+proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0.0 +k=1.0 +units=m +nadgrids=@null +wktext +no_defs +over",
      "advanced": {},
      "layerId": "world-nerivers"
    },
    {
      "geometry": "polygon",
      "extent": [
        -180,
        -85.051,
        180,
        85.01644893591046
      ],
      "id": "world-hd-hydropolys",
      "class": "",
      "Datasource": {
        "file": "data/hydropolys/hydropolys.shp",
        "type": "shape",
        "id": "world-hd-hydropolys",
        "project": "openstreetmap-carto-bw",
        "srs": "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs"
      },
      "layer": null,
      "srs-name": "WGS84",
      "srs": "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs",
      "advanced": {},
      "layerId": "world-hd-hydropolys"
    },
    {
      "geometry": "linestring",
      "extent": [
        -166.52852594852445,
        -54.978257417678776,
        178.56738328933716,
        70.48218727111811
      ],
      "id": "world-roads",
      "class": "",
      "Datasource": {
        "file": "data/World_Roads/v104/roads.gdb",
        "type": "ogr",
        "layer": "roads",
        "id": "worldroads",
        "project": "openstreetmap-carto-bw",
        "srs": "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs"
      },
      "layer": "roads",
      "srs-name": "WGS84",
      "srs": "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs",
      "advanced": {},
      "layerId": "world-roads"
    },
    {
      "geometry": "linestring",
      "extent": [
        -176.76400847314392,
        14.590750676565007,
        -52.64725244187385,
        70.29668386774571
      ],
      "id": "world-neroads-na",
      "class": "",
      "Datasource": {
        "file": "data/10m-roads-north-america/10m_roads_north_america.shp",
        "type": "shape"
      },
      "layer": null,
      "srs-name": "900913",
      "srs": "+proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0.0 +k=1.0 +units=m +nadgrids=@null +wktext +no_defs +over",
      "advanced": {},
      "layerId": "world-neroads-na"
    },
    {
      "geometry": "linestring",
      "extent": [
        -141.00554866607175,
        -55.12092376716174,
        140.977626994236,
        70.0753103641985
      ],
      "id": "world-necountries",
      "class": "",
      "Datasource": {
        "file": "data/10m-admin-0-boundary-lines-land/10m-admin-0-boundary-lines-land.shp",
        "type": "shape",
        "id": "necountries",
        "project": "openstreetmap-carto-bw",
        "srs": "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs"
      },
      "srs-name": "900913",
      "srs": "+proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0.0 +k=1.0 +units=m +nadgrids=@null +wktext +no_defs +over",
      "advanced": {},
      "layerId": "world-necountries",
      "layer": null
    },
    {
      "geometry": "linestring",
      "extent": [
        -139.0471919422785,
        -49.250740248410615,
        178.44862226797608,
        81.13822602001464
      ],
      "id": "world-neprovinces",
      "class": "",
      "Datasource": {
        "file": "data/10m-admin-1-states-provinces-lines/10m-admin-1-states-provinces-lines.shp",
        "type": "shape",
        "id": "world-neprovinces",
        "project": "openstreetmap-carto-bw",
        "srs": "+proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0.0 +k=1.0 +units=m +nadgrids=@null +wktext +no_defs +over"
      },
      "layer": null,
      "srs-name": "900913",
      "srs": "+proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0.0 +k=1.0 +units=m +nadgrids=@null +wktext +no_defs +over",
      "advanced": {},
      "layerId": "world-neprovinces"
    },
    {
      "geometry": "point",
      "extent": [
        -179.589978883969,
        -81.17908472282717,
        179.38330358817024,
        82.48332318035945
      ],
      "id": "world-nepopulated",
      "class": "",
      "Datasource": {
        "file": "data/10m-populated-places/10m-populated-places.shp",
        "type": "shape",
        "id": "nepopulated",
        "project": "openstreetmap-carto-bw",
        "srs": "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs"
      },
      "srs-name": "900913",
      "srs": "+proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0.0 +k=1.0 +units=m +nadgrids=@null +wktext +no_defs +over",
      "advanced": {},
      "layer": null,
      "layerId": "world-nepopulated"
    },
    {
      "geometry": "point",
      "extent": [
        -177.23111296705954,
        -80.39243740332425,
        178.5220789252438,
        73.97178749749689
      ],
      "id": "world-necountries-p",
      "class": "",
      "Datasource": {
        "file": "data/10m-admin-0-country-points/10m-admin-0-country-points.shp",
        "type": "shape",
        "id": "world-necountries-p",
        "project": "openstreetmap-carto-bw",
        "srs": "+proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0.0 +k=1.0 +units=m +nadgrids=@null +wktext +no_defs +over"
      },
      "layer": null,
      "srs-name": "900913",
      "srs": "+proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0.0 +k=1.0 +units=m +nadgrids=@null +wktext +no_defs +over",
      "advanced": {},
      "layerId": "world-necountries-p"
    },
    {
      "geometry": "polygon",
      "extent": [
        -179.99999999999991,
        -85.051,
        180,
        83.63410065300008
      ],
      "id": "world-neprovinces-p",
      "class": "",
      "Datasource": {
        "file": "data/ne_10m_admin_1_states_provinces_scale_rank/ne_10m_admin_1_states_provinces_scale_rank.shp",
        "id": "world-neprovinces-p",
        "type": "shape",
        "project": "openstreetmap-carto-bw",
        "srs": "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs"
      },
      "layer": null,
      "srs-name": "WGS84",
      "srs": "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs",
      "advanced": {},
      "layerId": "world-neprovinces-p"
    },
    {
      "geometry": "polygon",
      "class": "",
      "id": "landcover-low-zoom",
      "srs-name": "WGS84",
      "srs": "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs",
      "Datasource": {
        "table": "(SELECT\n    id,way, name, way_pixels,\n    COALESCE(wetland, landuse, \"natural\") AS feature\n  FROM (SELECT\n      id,way, COALESCE(name, '') AS name,\n      ('landuse_' || (CASE WHEN landuse IN ('forest', 'military') THEN landuse ELSE NULL END)) AS landuse,\n      ('natural_' || (CASE WHEN \"natural\" IN ('wood', 'sand', 'scree', 'shingle', 'bare_rock') THEN \"natural\" ELSE NULL END)) AS \"natural\",\n      ('wetland_' || (CASE WHEN \"natural\" IN ('wetland', 'mud') THEN (CASE WHEN \"natural\" IN ('mud') THEN \"natural\" ELSE wetland END) ELSE NULL END)) AS wetland,\n      way_area/NULLIF(CAST(!pixel_width! AS real)*CAST(!pixel_height! AS real),0) AS way_pixels\n    FROM polygons\n    WHERE (landuse IN ('forest', 'military')\n      OR \"natural\" IN ('wood', 'wetland', 'mud', 'sand', 'scree', 'shingle', 'bare_rock'))\n      AND way_area > 0.01*CAST(!pixel_width! AS real)*CAST(!pixel_height! AS real)\n      AND building IS NULL\n    ORDER BY CASE WHEN layer is not NULL THEN CAST(layer AS integer) ELSE 0 END, way_area DESC\n  ) AS features\n) AS landcover_low_zoom",
        "geometry_field": "way",
        "type": "sqlite",
        "file": "test_db4.sqlite",
        "extent": ""
      },
      "extent": [
        -180,
        -85.05112877980659,
        180,
        85.05112877980659
      ],
      "properties": {
        "maxzoom": 9,
        "minzoom": 7
      },
      "advanced": {},
      "status": "off",
      "layerId": "landcover-low-zoom"
    },
    {
      "geometry": "polygon",
      "class": "",
      "id": "landcover",
      "srs-name": "WGS84",
      "srs": "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs",
      "Datasource": {
        "table": "(SELECT\n    id,way, name, religion, way_pixels,\n    COALESCE(aeroway, amenity, wetland, power, landuse, leisure, military, \"natural\", tourism, highway, railway) AS feature\n  FROM (SELECT\n      id,way, COALESCE(name, '') AS name,\n      ('aeroway_' || (CASE WHEN aeroway IN ('apron', 'aerodrome') THEN aeroway ELSE NULL END)) AS aeroway,\n      ('amenity_' || (CASE WHEN amenity IN ('parking', 'bicycle_parking', 'motorcycle_parking', 'university', 'college', 'school', \n                                            'hospital', 'kindergarten', 'grave_yard', 'prison', 'place_of_worship', 'clinic') \n                                            THEN amenity ELSE NULL END)) AS amenity,\n      ('landuse_' || (CASE WHEN landuse IN ('quarry', 'vineyard', 'orchard', 'cemetery', 'residential', 'garages', 'meadow', 'grass', \n                                            'allotments', 'forest', 'farmyard', 'farm', 'farmland', 'greenhouse_horticulture', \n                                            'recreation_ground', 'village_green', 'retail', 'industrial', 'railway', 'commercial', \n                                            'brownfield', 'landfill', 'construction') THEN landuse ELSE NULL END)) AS landuse,\n      ('leisure_' || (CASE WHEN leisure IN ('swimming_pool', 'playground', 'park', 'recreation_ground', 'common', 'garden', \n                                            'golf_course', 'miniature_golf', 'picnic_table', 'sports_centre', 'stadium', 'pitch', \n                                            'track', 'dog_park') THEN leisure ELSE NULL END)) AS leisure,\n      ('military_' || (CASE WHEN military IN ('danger_area') THEN military ELSE NULL END)) AS military,\n      ('natural_' || (CASE WHEN \"natural\" IN ('beach', 'shoal', 'heath', 'grassland', 'wood', 'sand', 'scree', 'shingle', 'bare_rock', 'scrub') THEN \"natural\" ELSE NULL END)) AS \"natural\",\n      ('wetland_' || (CASE WHEN \"natural\" IN ('wetland', 'marsh', 'mud') THEN (CASE WHEN \"natural\" IN ('marsh', 'mud') THEN \"natural\" ELSE wetland END) ELSE NULL END)) AS wetland,\n      ('power_' || (CASE WHEN power IN ('station', 'sub_station', 'substation', 'generator') THEN power ELSE NULL END)) AS power,\n      ('tourism_' || (CASE WHEN tourism IN ('attraction', 'camp_site', 'caravan_site', 'picnic_site') THEN tourism ELSE NULL END)) AS tourism,\n      ('highway_' || (CASE WHEN highway IN ('services', 'rest_area') THEN highway ELSE NULL END)) AS highway,\n      ('railway_' || (CASE WHEN railway = 'station' THEN railway ELSE NULL END)) AS railway,\n      CASE WHEN religion IN ('christian', 'jewish') THEN religion ELSE CAST('INT-generic' AS text) END AS religion,\n      way_area/NULLIF(CAST(!pixel_width! AS real)*CAST(!pixel_height! AS real),0)) AS way_pixels\n    FROM polygons\n    WHERE (landuse IS NOT NULL\n      OR leisure IS NOT NULL\n      OR aeroway IN ('apron', 'aerodrome')\n      OR amenity IN ('parking', 'bicycle_parking', 'motorcycle_parking', 'university', 'college', 'school', 'hospital', 'kindergarten', \n                     'grave_yard', 'place_of_worship', 'prison', 'clinic')\n      OR military IN ('danger_area')\n      OR \"natural\" IN ('beach', 'shoal', 'heath', 'mud', 'marsh', 'wetland', 'grassland', 'wood', 'sand', 'scree', 'shingle', 'bare_rock', 'scrub')\n      OR power IN ('station', 'sub_station', 'substation', 'generator')\n      OR tourism IN ('attraction', 'camp_site', 'caravan_site', 'picnic_site')\n      OR highway IN ('services', 'rest_area')\n      OR railway = 'station')\n      AND way_area > 0.01*CAST(!pixel_width! AS real)*CAST(!pixel_height! AS real)\n    ORDER BY CASE WHEN layer is not NULL THEN CAST(layer AS integer) ELSE 0 END, way_area DESC\n  ) AS landcover\n) AS features",
        "geometry_field": "way",
        "type": "sqlite",
        "file": "test_db4.sqlite",
        "extent": ""
      },
      "extent": [
        -180,
        -85.05112877980659,
        180,
        85.05112877980659
      ],
      "properties": {
        "minzoom": 10
      },
      "advanced": {},
      "status": "off",
      "layerId": "landcover"
    },
    {
      "geometry": "linestring",
      "class": "",
      "id": "landcover-line",
      "srs-name": "WGS84",
      "srs": "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs",
      "Datasource": {
        "table": "(SELECT\n    way\n  FROM lines\n  WHERE man_made = 'cutline'\n) AS landcover_line",
        "geometry_field": "way",
        "type": "sqlite",
        "file": "test_db4.sqlite",
        "extent": ""
      },
      "extent": [
        -180,
        -85.05112877980659,
        180,
        85.05112877980659
      ],
      "properties": {
        "minzoom": 14
      },
      "advanced": {},
      "status": "off",
      "layerId": "landcover-line"
    },
    {
      "geometry": "linestring",
      "class": "",
      "id": "water-lines-casing",
      "srs-name": "WGS84",
      "srs": "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs",
      "Datasource": {
        "table": "(SELECT\n    id,way, waterway, intermittent,\n    CASE WHEN tunnel IN ('yes', 'culvert') THEN 'yes' ELSE 'no' END AS int_tunnel\n  FROM lines\n  WHERE waterway IN ('stream', 'drain', 'ditch')\n) AS water_lines_casing",
        "geometry_field": "way",
        "type": "sqlite",
        "file": "test_db4.sqlite",
        "extent": ""
      },
      "extent": [
        -180,
        -85.05112877980659,
        180,
        85.05112877980659
      ],
      "properties": {
        "minzoom": 13
      },
      "advanced": {},
      "layerId": "water-lines-casing"
    },
    {
      "geometry": "linestring",
      "class": "",
      "id": "water-lines-low-zoom",
      "srs-name": "WGS84",
      "srs": "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs",
      "Datasource": {
        "table": "(SELECT\n    id,way,\n    waterway,\n    intermittent\n  FROM lines\n  WHERE waterway = 'river'\n) AS water_lines_low_zoom",
        "geometry_field": "way",
        "type": "sqlite",
        "file": "test_db4.sqlite",
        "extent": ""
      },
      "extent": [
        -180,
        -85.05112877980659,
        180,
        85.05112877980659
      ],
      "properties": {
        "maxzoom": 11,
        "minzoom": 8
      },
      "advanced": {},
      "layerId": "water-lines-low-zoom"
    },
    {
      "geometry": "polygon",
      "class": "",
      "id": "icesheet-poly",
      "srs-name": "WGS84",
      "srs": "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs",
      "Datasource": {
        "type": "shape",
        "file": "data/antarctica-icesheet-polygons-3857/icesheet_polygons.shp"
      },
      "extent": [
        -180,
        -85.05112877980659,
        180,
        85.05112877980659
      ],
      "properties": {
        "minzoom": 4
      },
      "advanced": {},
      "layerId": "icesheet-poly",
      "status": "off"
    },
    {
      "geometry": "polygon",
      "class": "",
      "id": "water-areas",
      "srs-name": "WGS84",
      "srs": "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs",
      "Datasource": {
        "table": "(SELECT\n    id,way,\n    \"natural\",\n    waterway,\n    landuse,\n    name,\n    way_area/NULLIF(CAST(!pixel_width! AS real)*CAST(!pixel_height! AS real),0) AS way_pixels\n  FROM polygons\n  WHERE\n    (waterway IN ('dock', 'riverbank', 'canal')\n      OR landuse IN ('reservoir', 'basin')\n      OR \"natural\" IN ('water', 'glacier'))\n    AND building IS NULL\n  AND way_area > 0.01*CAST(!pixel_width! AS real)*CAST(!pixel_height! AS real)  \n  ORDER BY z_order, way_area DESC\n) AS water_areas",
        "geometry_field": "way",
        "type": "sqlite",
        "file": "test_db4.sqlite",
        "extent": ""
      },
      "extent": [
        -180,
        -85.05112877980659,
        180,
        85.05112877980659
      ],
      "properties": {
        "minzoom": 4
      },
      "advanced": {},
      "layerId": "water-areas"
    },
    {
      "geometry": "polygon",
      "class": "",
      "id": "landcover-area-symbols",
      "srs-name": "WGS84",
      "srs": "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs",
      "Datasource": {
        "table": "(SELECT\n    id,way, surface, \n    COALESCE(CASE WHEN landuse = 'forest' THEN 'wood' ELSE NULL END, \"natural\") AS \"natural\",\n    CASE WHEN \"natural\" IN ('marsh', 'mud') \n        THEN \"natural\" \n        ELSE CASE WHEN (\"natural\" = 'wetland' AND wetland IS NULL) \n          THEN 'wetland' \n          ELSE CASE WHEN (\"natural\" = 'wetland')\n            THEN wetland\n            ELSE NULL\n            END \n        END\n      END AS int_wetland\n  FROM polygons\n  WHERE (\"natural\" IN ('marsh', 'mud', 'wetland', 'wood', 'beach', 'shoal', 'reef') OR landuse = 'forest')\n    AND building IS NULL\n    AND way_area > 0.01*CAST(!pixel_width! AS real)*CAST(!pixel_height! AS real)\n  ORDER BY z_order, way_area DESC\n) AS landcover_area_symbols",
        "geometry_field": "way",
        "type": "sqlite",
        "file": "test_db4.sqlite",
        "extent": ""
      },
      "extent": [
        -180,
        -85.05112877980659,
        180,
        85.05112877980659
      ],
      "properties": {
        "minzoom": 10
      },
      "advanced": {},
      "status": "off",
      "layerId": "landcover-area-symbols"
    },
    {
      "geometry": "linestring",
      "class": "",
      "id": "icesheet-outlines",
      "srs-name": "WGS84",
      "srs": "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs",
      "Datasource": {
        "type": "shape",
        "file": "data/antarctica-icesheet-outlines-3857/icesheet_outlines.shp"
      },
      "extent": [
        -180,
        -85.05112877980659,
        180,
        85.05112877980659
      ],
      "properties": {
        "minzoom": 4
      },
      "advanced": {},
      "status": "off",
      "layerId": "icesheet-outlines"
    },
    {
      "geometry": "linestring",
      "class": "water-lines",
      "id": "water-lines",
      "srs-name": "WGS84",
      "srs": "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs",
      "Datasource": {
        "table": "(SELECT\n    id,way, waterway, name, intermittent,\n    CASE WHEN tunnel IN ('yes', 'culvert') THEN 'yes' ELSE 'no' END AS int_tunnel,\n    'no' AS bridge\n  FROM lines\n  WHERE waterway IN ('river', 'canal', 'derelict_canal', 'stream', 'drain', 'ditch', 'wadi')\n    AND (bridge IS NULL OR bridge NOT IN ('yes', 'aqueduct'))\n  ORDER BY z_order\n) AS water_lines",
        "geometry_field": "way",
        "type": "sqlite",
        "file": "test_db4.sqlite",
        "extent": ""
      },
      "extent": [
        -180,
        -85.05112877980659,
        180,
        85.05112877980659
      ],
      "properties": {
        "minzoom": 12
      },
      "advanced": {},
      "layerId": "water-lines"
    },
    {
      "geometry": "linestring",
      "class": "",
      "id": "water-barriers-line",
      "srs-name": "WGS84",
      "srs": "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs",
      "Datasource": {
        "table": "(SELECT\n    id,way,\n    waterway,\n    name\n  FROM lines\n  WHERE waterway IN ('dam', 'weir', 'lock_gate')\n) AS water_barriers_line",
        "geometry_field": "way",
        "type": "sqlite",
        "file": "test_db4.sqlite",
        "extent": ""
      },
      "extent": [
        -180,
        -85.05112877980659,
        180,
        85.05112877980659
      ],
      "properties": {
        "minzoom": 13
      },
      "advanced": {},
      "layerId": "water-barriers-line"
    },
    {
      "geometry": "polygon",
      "class": "",
      "id": "water-barriers-poly",
      "srs-name": "WGS84",
      "srs": "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs",
      "Datasource": {
        "table": "(SELECT\n    id,way,\n    waterway,\n    name\n  FROM polygons\n  WHERE waterway IN ('dam', 'weir', 'lock_gate')\n) AS water_barriers_poly",
        "geometry_field": "way",
        "type": "sqlite",
        "file": "test_db4.sqlite",
        "extent": ""
      },
      "extent": [
        -180,
        -85.05112877980659,
        180,
        85.05112877980659
      ],
      "properties": {
        "minzoom": 13
      },
      "advanced": {},
      "layerId": "water-barriers-poly"
    },
    {
      "geometry": "polygon",
      "class": "",
      "id": "marinas-area",
      "srs-name": "WGS84",
      "srs": "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs",
      "Datasource": {
        "table": "(SELECT\n    id,way\n  FROM polygons\n  WHERE leisure = 'marina'\n) AS marinas_area",
        "geometry_field": "way",
        "type": "sqlite",
        "file": "test_db4.sqlite",
        "extent": ""
      },
      "extent": [
        -180,
        -85.05112877980659,
        180,
        85.05112877980659
      ],
      "properties": {
        "minzoom": 14
      },
      "advanced": {},
      "layerId": "marinas-area"
    },
    {
      "geometry": "polygon",
      "class": "",
      "id": "piers-poly",
      "srs-name": "WGS84",
      "srs": "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs",
      "Datasource": {
        "table": "(SELECT\n    id,way, man_made\n  FROM polygons\n  WHERE man_made IN ('pier', 'breakwater', 'groyne')\n) AS piers_poly",
        "geometry_field": "way",
        "type": "sqlite",
        "file": "test_db4.sqlite",
        "extent": ""
      },
      "extent": [
        -180,
        -85.05112877980659,
        180,
        85.05112877980659
      ],
      "properties": {
        "minzoom": 12
      },
      "advanced": {},
      "layerId": "piers-poly"
    },
    {
      "geometry": "linestring",
      "class": "",
      "id": "piers-line",
      "srs-name": "WGS84",
      "srs": "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs",
      "Datasource": {
        "table": "(SELECT\n    id,way, man_made\n  FROM lines\n  WHERE man_made IN ('pier', 'breakwater', 'groyne')\n) AS piers_line",
        "geometry_field": "way",
        "type": "sqlite",
        "file": "test_db4.sqlite",
        "extent": ""
      },
      "extent": [
        -180,
        -85.05112877980659,
        180,
        85.05112877980659
      ],
      "properties": {
        "minzoom": 12
      },
      "advanced": {},
      "layerId": "piers-line"
    },
    {
      "geometry": "point",
      "class": "",
      "id": "water-barriers-point",
      "srs-name": "WGS84",
      "srs": "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs",
      "Datasource": {
        "table": "(SELECT\n    id,way, waterway\n  FROM points\n  WHERE waterway IN ('dam', 'weir', 'lock_gate')\n) AS water_barriers_points",
        "geometry_field": "way",
        "type": "sqlite",
        "file": "test_db4.sqlite",
        "extent": ""
      },
      "extent": [
        -180,
        -85.05112877980659,
        180,
        85.05112877980659
      ],
      "properties": {
        "minzoom": 17
      },
      "advanced": {},
      "layerId": "water-barriers-point"
    },
    {
      "geometry": "polygon",
      "class": "",
      "id": "bridge",
      "srs-name": "WGS84",
      "srs": "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs",
      "Datasource": {
        "table": "(SELECT\n    id,way,\n    way_area/NULLIF(CAST(!pixel_width! AS real)*CAST(!pixel_height! AS real),0) AS way_pixels,\n    man_made,\n    name\n  FROM polygons\n  WHERE man_made = 'bridge'\n) AS bridge",
        "type": "sqlite",
        "file": "test_db4.sqlite",
        "geometry_field": "way",
        "attachdb": "",
        "extent": ""
      },
      "extent": [
        -180,
        -85.05112877980659,
        180,
        85.05112877980659
      ],
      "properties": {
        "minzoom": 12
      },
      "advanced": {},
      "layerId": "bridge"
    },
    {
      "geometry": "polygon",
      "class": "",
      "id": "buildings",
      "srs-name": "WGS84",
      "srs": "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs",
      "Datasource": {
        "table": "(SELECT\n    id,way,\n    building\n  FROM polygons\n  WHERE building IS NOT NULL\n    AND building != 'no'\n    AND way_area > 0.01*CAST(!pixel_width! AS real)*CAST(!pixel_height! AS real)\n  ORDER BY z_order, way_area DESC\n) AS buildings",
        "geometry_field": "way",
        "type": "sqlite",
        "file": "test_db4.sqlite",
        "extent": ""
      },
      "extent": [
        -180,
        -85.05112877980659,
        180,
        85.05112877980659
      ],
      "properties": {
        "minzoom": 13
      },
      "advanced": {},
      "layerId": "buildings"
    },
    {
      "geometry": "polygon",
      "class": "",
      "id": "buildings-major",
      "srs-name": "WGS84",
      "srs": "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs",
      "Datasource": {
        "table": "(SELECT\n    id,way,\n    building,\n    amenity,\n    aeroway\n  FROM polygons\n  WHERE building IS NOT NULL\n    AND building != 'no'\n    AND (aeroway = 'terminal' OR amenity = 'place_of_worship')\n    AND way_area > 0.01*CAST(!pixel_width! AS real)*CAST(!pixel_height! AS real)\n  ORDER BY z_order, way_area DESC)\nAS buildings_major",
        "geometry_field": "way",
        "type": "sqlite",
        "file": "test_db4.sqlite",
        "extent": ""
      },
      "extent": [
        -180,
        -85.05112877980659,
        180,
        85.05112877980659
      ],
      "properties": {
        "minzoom": 13
      },
      "advanced": {},
      "layerId": "buildings-major"
    },
    {
      "geometry": "linestring",
      "class": "tunnels-fill tunnels-casing access",
      "id": "tunnels",
      "srs-name": "WGS84",
      "srs": "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs",
      "Datasource": {
        "table": "(SELECT\n    id,way,\n    (CASE WHEN substr(feature, length(feature)-3, 4) = 'link' THEN substr(feature, 0, length(feature)-4) ELSE feature END) AS feature,\n    horse,\n    foot,\n    bicycle,\n    tracktype,\n    int_surface,\n    access,\n    construction,\n    service,\n    link,\n    layernotnull\n  FROM ( -- subselect that contains both roads and rail/aero\n    SELECT\n        id,way,\n        ('highway_' || highway) AS feature, --only motorway to tertiary links are accepted later on\n        horse,\n        foot,\n        bicycle,\n        tracktype,\n        CASE WHEN surface IN ('unpaved', 'compacted', 'dirt', 'earth', 'fine_gravel', 'grass', 'grass_paver', 'gravel', 'ground',\n                              'mud', 'pebblestone', 'salt', 'sand', 'woodchips', 'clay') THEN 'unpaved'\n          WHEN surface IN ('paved', 'asphalt', 'cobblestone', 'cobblestone:flattened', 'sett', 'concrete', 'concrete:lanes',\n                              'concrete:plates', 'paving_stones', 'metal', 'wood') THEN 'paved'\n          ELSE NULL\n        END AS int_surface,\n        CASE WHEN access IN ('destination') THEN CAST('destination' AS text)\n          WHEN access IN ('no', 'private') THEN CAST('no' AS text)\n          ELSE NULL\n        END AS access,\n        construction,\n        CASE\n          WHEN service IN ('parking_aisle', 'drive-through', 'driveway') THEN CAST('INT-minor' AS text)\n          ELSE CAST('INT-normal' AS text)\n        END AS service,\n        CASE\n          WHEN substr(highway, length(highway)-3, 4) = 'link' THEN 'yes'\n          ELSE 'no'\n        END AS link,\n        CASE WHEN layer is not NULL THEN CAST(layer AS integer) ELSE 0 END AS layernotnull\n      FROM lines\n      WHERE (tunnel = 'yes' OR tunnel = 'building_passage' OR covered = 'yes')\n        AND highway IS NOT NULL -- end of road select\n    UNION ALL\n    SELECT\n        id,way,\n        COALESCE(\n          ('railway_' || (CASE WHEN railway = 'preserved' AND service IN ('spur', 'siding', 'yard') THEN CAST('INT-preserved-ssy' AS text) \n                               WHEN (railway = 'rail' AND service IN ('spur', 'siding', 'yard')) THEN 'INT-spur-siding-yard'  \n                               WHEN (railway = 'tram' AND service IN ('spur', 'siding', 'yard')) THEN 'tram-service' ELSE railway END)),\n          ('aeroway_' || aeroway)\n        ) AS feature,\n        horse,\n        foot,\n        bicycle,\n        tracktype,\n        'null',\n        CASE\n          WHEN access IN ('destination') THEN CAST('destination' AS text)\n          WHEN access IN ('no', 'private') THEN CAST('no' AS text)\n          ELSE NULL\n        END AS access,\n        construction,\n        CASE WHEN service IN ('parking_aisle', 'drive-through', 'driveway') THEN CAST('INT-minor' AS text) ELSE CAST('INT-normal' AS text) END AS service,\n        'no' AS link,\n        CASE WHEN layer is not NULL THEN CAST(layer AS integer) ELSE 0 END AS layernotnull\n      FROM lines\n      WHERE (tunnel = 'yes' OR tunnel = 'building_passage' OR covered = 'yes')\n        AND (railway IS NOT NULL OR aeroway IS NOT NULL) -- end of rail/aero select\n    ) AS features\n  JOIN  ordertable\n    USING (feature)\n  ORDER BY\n    layernotnull,\n    prio,\n    CASE WHEN access IN ('no', 'private') THEN 0 WHEN access IN ('destination') THEN 1 ELSE 2 END,\n    CASE WHEN int_surface IN ('unpaved') THEN 0 ELSE 2 END\n) AS tunnels",
        "geometry_field": "way",
        "type": "sqlite",
        "file": "test_db4.sqlite",
        "extent": ""
      },
      "extent": [
        -180,
        -85.05112877980659,
        180,
        85.05112877980659
      ],
      "properties": {
        "group-by": "layernotnull",
        "minzoom": 9
      },
      "advanced": {},
      "layerId": "tunnels"
    },
    {
      "geometry": "polygon",
      "class": "",
      "id": "landuse-overlay",
      "srs-name": "WGS84",
      "srs": "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs",
      "Datasource": {
        "table": "(SELECT\n    id,way,\n    landuse,\n    way_area/NULLIF(CAST(!pixel_width! AS real)*CAST(!pixel_height! AS real0,0) AS way_pixels\n  FROM polygons\n  WHERE landuse = 'military'\n    AND building IS NULL\n) AS landuse_overlay",
        "geometry_field": "way",
        "type": "sqlite",
        "file": "test_db4.sqlite",
        "extent": ""
      },
      "extent": [
        -180,
        -85.05112877980659,
        180,
        85.05112877980659
      ],
      "properties": {
        "minzoom": 7
      },
      "advanced": {},
      "status": "off",
      "layerId": "landuse-overlay"
    },
    {
      "geometry": "linestring",
      "class": "barriers",
      "id": "line-barriers",
      "srs-name": "WGS84",
      "srs": "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs",
      "Datasource": {
        "table": "(SELECT\n    id,way, COALESCE(historic, barrier) AS feature\n  FROM (SELECT id,way,\n    ('barrier_' || (CASE WHEN barrier IN ('chain', 'city_wall', 'embankment', 'ditch', 'fence', 'guard_rail',\n          'handrail', 'hedge', 'kerb', 'retaining_wall', 'wall') THEN barrier ELSE NULL END)) AS barrier,\n    ('historic_' || (CASE WHEN historic = 'citywalls' THEN historic ELSE NULL END)) AS historic\n    FROM lines\n    WHERE barrier IN ('chain', 'city_wall', 'embankment', 'ditch', 'fence', 'guard_rail',\n          'handrail', 'hedge', 'kerb', 'retaining_wall', 'wall')\n      OR historic = 'city_wall'\n      AND (waterway IS NULL OR waterway NOT IN ('river', 'canal', 'derelict_canal', 'stream', 'drain', 'ditch', 'wadi'))\n  ) AS features\n) AS line_barriers",
        "geometry_field": "way",
        "type": "sqlite",
        "file": "test_db4.sqlite",
        "extent": ""
      },
      "extent": [
        -180,
        -85.05112877980659,
        180,
        85.05112877980659
      ],
      "properties": {
        "minzoom": 14
      },
      "advanced": {},
      "status": "off",
      "layerId": "line-barriers"
    },
    {
      "geometry": "linestring",
      "class": "",
      "id": "cliffs",
      "srs-name": "WGS84",
      "srs": "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs",
      "Datasource": {
        "table": "(SELECT\n    id,way, \"natural\", man_made\n  FROM lines\n  WHERE \"natural\" = 'cliff' OR man_made = 'embankment'\n) AS cliffs",
        "geometry_field": "way",
        "type": "sqlite",
        "file": "test_db4.sqlite",
        "extent": ""
      },
      "extent": [
        -180,
        -85.05112877980659,
        180,
        85.05112877980659
      ],
      "properties": {
        "minzoom": 13
      },
      "advanced": {},
      "status": "off",
      "layerId": "cliffs"
    },
    {
      "geometry": "polygon",
      "class": "barriers",
      "id": "area-barriers",
      "srs-name": "WGS84",
      "srs": "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs",
      "Datasource": {
        "table": "(SELECT\n    id,way, barrier AS feature\n  FROM (SELECT id,way,\n    ('barrier_' || barrier) AS barrier\n    FROM polygons\n    WHERE barrier IS NOT NULL\n  ) AS features\n) AS area_barriers",
        "geometry_field": "way",
        "type": "sqlite",
        "file": "test_db4.sqlite",
        "extent": ""
      },
      "extent": [
        -180,
        -85.05112877980659,
        180,
        85.05112877980659
      ],
      "properties": {
        "minzoom": 16
      },
      "advanced": {},
      "status": "off",
      "layerId": "area-barriers"
    },
    {
      "geometry": "linestring",
      "class": "",
      "id": "ferry-routes",
      "srs-name": "WGS84",
      "srs": "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs",
      "Datasource": {
        "table": "(SELECT\n    id,way\n  FROM lines\n  WHERE route = 'ferry'\n) AS ferry_routes",
        "geometry_field": "way",
        "type": "sqlite",
        "file": "test_db4.sqlite",
        "extent": ""
      },
      "extent": [
        -180,
        -85.05112877980659,
        180,
        85.05112877980659
      ],
      "properties": {
        "minzoom": 7
      },
      "advanced": {},
      "layerId": "ferry-routes"
    },
    {
      "geometry": "point",
      "class": "",
      "id": "turning-circle-casing",
      "srs-name": "WGS84",
      "srs": "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs",
      "Datasource": {
        "table": "(SELECT DISTINCT ON (p.way)\n    p.way AS id,way, l.highway AS int_tc_type,\n    CASE WHEN l.service IN ('parking_aisle', 'drive-through', 'driveway')\n      THEN CAST('INT-minor' AS text)\n      ELSE CAST('INT-normal' AS text)\n    END AS int_tc_service\n  FROM points p\n    JOIN lines l ON ST_DWithin(p.way, l.way, 0.1) -- Assumes Mercator\n    JOIN (VALUES\n      ('tertiary', 1),\n      ('unclassified', 2),\n      ('residential', 3),\n      ('living_street', 4),\n      ('service', 5)\n      ) AS v (highway, prio)\n      ON v.highway=l.highway\n  WHERE p.highway = 'turning_circle'\n    OR p.highway = 'turning_loop'\n  ORDER BY p.way, v.prio\n) AS turning_circle_casing",
        "geometry_field": "way",
        "type": "sqlite",
        "file": "test_db4.sqlite",
        "extent": ""
      },
      "extent": [
        -180,
        -85.05112877980659,
        180,
        85.05112877980659
      ],
      "properties": {
        "minzoom": 15
      },
      "advanced": {},
      "status": "off",
      "layerId": "turning-circle-casing"
    },
    {
      "geometry": "polygon",
      "class": "",
      "id": "highway-area-casing",
      "srs-name": "WGS84",
      "srs": "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs",
      "Datasource": {
        "table": "(SELECT\n    id,way,\n    COALESCE((\n      'highway_' || (CASE WHEN highway IN ('residential', 'unclassified', 'pedestrian', 'service', 'footway', 'cycleway', 'track', 'path', 'platform') THEN highway ELSE NULL END)),\n      ('railway_' || (CASE WHEN railway IN ('platform') THEN railway ELSE NULL END))\n    ) AS feature\n  FROM polygons\n  WHERE highway IN ('residential', 'unclassified', 'pedestrian', 'service', 'footway', 'track', 'path', 'platform')\n    OR railway IN ('platform')\n  ORDER BY z_order, way_area DESC\n) AS highway_area_casing",
        "geometry_field": "way",
        "type": "sqlite",
        "file": "test_db4.sqlite",
        "extent": ""
      },
      "extent": [
        -180,
        -85.05112877980659,
        180,
        85.05112877980659
      ],
      "properties": {
        "minzoom": 14
      },
      "advanced": {},
      "layerId": "highway-area-casing"
    },
    {
      "geometry": "linestring",
      "class": "roads-casing",
      "srs-name": "WGS84",
      "srs": "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs",
      "Datasource": {
        "table": "(SELECT\n    id,way,\n    (CASE WHEN substr(feature, length(feature)-3, 4) = 'link' THEN substr(feature, 0, length(feature)-4) ELSE feature END) AS feature,\n    horse,\n    foot,\n    bicycle,\n    tracktype,\n    int_surface,\n    access,\n    construction,\n    service,\n    link,\n    layernotnull\n  FROM ( -- subselect that contains both roads and rail/aero\n    SELECT\n        id,way,\n        ('highway_' || highway) AS feature, --only motorway to tertiary links are accepted later on\n        horse,\n        foot,\n        bicycle,\n        tracktype,\n        CASE WHEN surface IN ('unpaved', 'compacted', 'dirt', 'earth', 'fine_gravel', 'grass', 'grass_paver', 'gravel', 'ground',\n                              'mud', 'pebblestone', 'salt', 'sand', 'woodchips', 'clay') THEN 'unpaved'\n          WHEN surface IN ('paved', 'asphalt', 'cobblestone', 'cobblestone:flattened', 'sett', 'concrete', 'concrete:lanes',\n                              'concrete:plates', 'paving_stones', 'metal', 'wood') THEN 'paved'\n          ELSE NULL\n        END AS int_surface,\n        CASE WHEN access IN ('destination') THEN CAST('destination' AS text)\n          WHEN access IN ('no', 'private') THEN CAST('no' AS text)\n          ELSE NULL\n        END AS access,\n        construction,\n        CASE\n          WHEN service IN ('parking_aisle', 'drive-through', 'driveway') THEN CAST('INT-minor' AS text)\n          ELSE CAST('INT-normal' AS text)\n        END AS service,\n        CASE\n          WHEN substr(highway, length(highway)-3, 4) = 'link' THEN 'yes'\n          ELSE 'no'\n        END AS link,\n        CASE WHEN layer is not NULL THEN CAST(layer AS integer) ELSE 0 END AS layernotnull\n      FROM lines\n      WHERE (tunnel IS NULL OR NOT tunnel IN ('yes', 'building_passage'))\n        AND (covered IS NULL OR NOT covered = 'yes')\n        AND (bridge IS NULL OR NOT bridge IN ('yes', 'boardwalk', 'cantilever', 'covered', 'low_water_crossing', 'movable', 'trestle', 'viaduct'))\n        AND highway IS NOT NULL -- end of road select\n    UNION ALL\n    SELECT\n        id,way,\n        COALESCE(\n          ('railway_' || (CASE WHEN railway = 'preserved' AND service IN ('spur', 'siding', 'yard') THEN CAST('INT-preserved-ssy' AS text) \n                               WHEN (railway = 'rail' AND service IN ('spur', 'siding', 'yard')) THEN 'INT-spur-siding-yard'  \n                               WHEN (railway = 'tram' AND service IN ('spur', 'siding', 'yard')) THEN 'tram-service' ELSE railway END)),\n          ('aeroway_' || aeroway)\n        ) AS feature,\n        horse,\n        foot,\n        bicycle,\n        tracktype,\n        'null',\n        CASE\n          WHEN access IN ('destination') THEN CAST('destination' AS text)\n          WHEN access IN ('no', 'private') THEN CAST('no' AS text)\n          ELSE NULL\n        END AS access,\n        construction,\n        CASE WHEN service IN ('parking_aisle', 'drive-through', 'driveway') THEN CAST('INT-minor' AS text) ELSE CAST('INT-normal' AS text) END AS service,\n        'no' AS link,\n        CASE WHEN layer is not NULL THEN CAST(layer AS integer) ELSE 0 END AS layernotnull\n      FROM lines\n      WHERE (tunnel IS NULL OR NOT tunnel IN ('yes', 'building_passage'))\n        AND (covered IS NULL OR NOT covered = 'yes')\n        AND (bridge IS NULL OR NOT bridge IN ('yes', 'boardwalk', 'cantilever', 'covered', 'low_water_crossing', 'movable', 'trestle', 'viaduct'))\n        AND (railway IS NOT NULL OR aeroway IS NOT NULL) -- end of rail/aero select\n    ) AS features\n  JOIN ordertable\n    USING (feature)\n  ORDER BY\n    layernotnull,\n    prio,\n    CASE WHEN access IN ('no', 'private') THEN 0 WHEN access IN ('destination') THEN 1 ELSE 2 END,\n    CASE WHEN int_surface IN ('unpaved') THEN 0 ELSE 2 END\n) AS roads_casing",
        "type": "sqlite",
        "file": "test_db4.sqlite",
        "geometry_field": "way",
        "attachdb": "",
        "extent": ""
      },
      "extent": [
        -180,
        -85.05112877980659,
        180,
        85.05112877980659
      ],
      "id": "roads-casing",
      "properties": {
        "minzoom": 9
      },
      "advanced": {},
      "layerId": "roads-casing"
    },
    {
      "geometry": "polygon",
      "class": "",
      "id": "highway-area-fill",
      "srs-name": "WGS84",
      "srs": "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs",
      "Datasource": {
        "table": "(SELECT\n    id,way,\n    COALESCE(\n      ('highway_' || (CASE WHEN highway IN ('residential', 'unclassified', 'pedestrian', 'service', 'footway', 'cycleway', 'living_street', \n                                            'track', 'path', 'platform', 'services') THEN highway ELSE NULL END)),\n      ('railway_' || (CASE WHEN railway IN ('platform') THEN railway ELSE NULL END)),\n      (('aeroway_' || CASE WHEN aeroway IN ('runway', 'taxiway', 'helipad') THEN aeroway ELSE NULL END))\n    ) AS feature\n  FROM polygons\n  WHERE highway IN ('residential', 'unclassified', 'pedestrian', 'service', 'footway', 'living_street', 'track', 'path', 'platform', 'services')\n    OR railway IN ('platform')\n    OR aeroway IN ('runway', 'taxiway', 'helipad')\n  ORDER BY z_order, way_area desc\n) AS highway_area_fill",
        "geometry_field": "way",
        "type": "sqlite",
        "file": "test_db4.sqlite",
        "extent": ""
      },
      "extent": [
        -180,
        -85.05112877980659,
        180,
        85.05112877980659
      ],
      "properties": {
        "minzoom": 14
      },
      "advanced": {},
      "layerId": "highway-area-fill"
    },
    {
      "geometry": "linestring",
      "class": "roads-fill access",
      "id": "roads-fill",
      "srs-name": "WGS84",
      "srs": "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs",
      "Datasource": {
        "table": "(SELECT\n    id,way,\n    (CASE WHEN substr(feature, length(feature)-3, 4) = 'link' THEN substr(feature, 0, length(feature)-4) ELSE feature END) AS feature,\n    horse,\n    foot,\n    bicycle,\n    tracktype,\n    int_surface,\n    access,\n    construction,\n    service,\n    link,\n    layernotnull\n  FROM ( -- begin \"features\" subselect that contains both roads and rail/aero\n    SELECT\n        id,way,\n        ('highway_' || highway) AS feature, -- only motorway to tertiary links are accepted later on\n        horse,\n        foot,\n        bicycle,\n        tracktype,\n        CASE WHEN surface IN ('unpaved', 'compacted', 'dirt', 'earth', 'fine_gravel', 'grass', 'grass_paver', 'gravel', 'ground',\n                              'mud', 'pebblestone', 'salt', 'sand', 'woodchips', 'clay') THEN 'unpaved'\n          WHEN surface IN ('paved', 'asphalt', 'cobblestone', 'cobblestone:flattened', 'sett', 'concrete', 'concrete:lanes',\n                              'concrete:plates', 'paving_stones', 'metal', 'wood') THEN 'paved'\n          ELSE NULL\n        END AS int_surface,\n        CASE WHEN access IN ('destination') THEN CAST('destination' AS text)\n          WHEN access IN ('no', 'private') THEN CAST('no' AS text)\n          ELSE NULL\n        END AS access,\n        construction,\n        CASE\n          WHEN service IN ('parking_aisle', 'drive-through', 'driveway') THEN CAST('INT-minor' AS text)\n          ELSE CAST('INT-normal' AS text)\n        END AS service,\n        CASE\n          WHEN substr(highway, length(highway)-3, 4) = 'link' THEN 'yes'\n          ELSE 'no'\n        END AS link,\n        CASE WHEN layer is not NULL THEN CAST(layer AS integer) ELSE 0 END AS layernotnull\n      FROM lines\n      WHERE (tunnel IS NULL OR NOT tunnel IN ('yes', 'building_passage'))\n        AND (covered IS NULL OR NOT covered = 'yes')\n        AND (bridge IS NULL OR NOT bridge IN ('yes', 'boardwalk', 'cantilever', 'covered', 'low_water_crossing', 'movable', 'trestle', 'viaduct'))\n        AND highway IS NOT NULL -- end of road select\n    UNION ALL\n    SELECT\n        id,way,\n        COALESCE(\n          ('railway_' || (CASE WHEN railway = 'preserved' AND service IN ('spur', 'siding', 'yard') THEN CAST('INT-preserved-ssy' AS text) \n                               WHEN (railway = 'rail' AND service IN ('spur', 'siding', 'yard')) THEN 'INT-spur-siding-yard'  \n                               WHEN (railway = 'tram' AND service IN ('spur', 'siding', 'yard')) THEN 'tram-service' ELSE railway END)),\n          ('aeroway_' || aeroway)\n        ) AS feature,\n        horse,\n        foot,\n        bicycle,\n        tracktype,\n        'null' AS surface, -- Should be a SQL NULL?\n        CASE\n          WHEN access IN ('destination') THEN CAST('destination' AS text)\n          WHEN access IN ('no', 'private') THEN CAST('no' AS text)\n          ELSE NULL\n        END AS access,\n        construction,\n        CASE WHEN service IN ('parking_aisle', 'drive-through', 'driveway') THEN CAST('INT-minor' AS text) ELSE CAST('INT-normal' AS text) END AS service,\n        'no' AS link,\n        CASE WHEN layer is not NULL THEN CAST(layer AS integer) ELSE 0 END AS layernotnull\n      FROM lines\n      WHERE (tunnel IS NULL OR NOT tunnel IN ('yes', 'building_passage'))\n        AND (covered IS NULL OR NOT covered = 'yes')\n        AND (bridge IS NULL OR NOT bridge IN ('yes', 'boardwalk', 'cantilever', 'covered', 'low_water_crossing', 'movable', 'trestle', 'viaduct'))\n        AND (railway IS NOT NULL OR aeroway IS NOT NULL) -- end of rail/aero select\n    ) AS features\n  JOIN ordertable\n    USING (feature)\n  ORDER BY\n    layernotnull,\n    prio,\n    CASE WHEN access IN ('no', 'private') THEN 0 WHEN access IN ('destination') THEN 1 ELSE 2 END,\n    CASE WHEN int_surface IN ('unpaved') THEN 0 ELSE 2 END\n) AS roads_fill",
        "type": "sqlite",
        "file": "test_db4.sqlite",
        "geometry_field": "way",
        "attachdb": "",
        "extent": ""
      },
      "extent": [
        -180,
        -85.05112877980659,
        180,
        85.05112877980659
      ],
      "properties": {
        "minzoom": 10
      },
      "advanced": {},
      "layerId": "roads-fill"
    },
    {
      "geometry": "point",
      "class": "",
      "id": "turning-circle-fill",
      "srs-name": "WGS84",
      "srs": "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs",
      "Datasource": {
        "table": "(SELECT\n    DISTINCT on (p.way)\n    p.way AS id,way, l.highway AS int_tc_type,\n    CASE WHEN l.service IN ('parking_aisle', 'drive-through', 'driveway') THEN CAST('INT-minor' AS text)\n      ELSE CAST('INT-normal' AS text) END AS int_tc_service\n  FROM points p\n    JOIN lines l\n      ON ST_DWithin(p.way, l.way, 0.1)\n    JOIN (VALUES\n      ('tertiary', 1),\n      ('unclassified', 2),\n      ('residential', 3),\n      ('living_street', 4),\n      ('service', 5),\n      ('track', 6)\n    ) AS v (highway, prio)\n      ON v.highway=l.highway\n  WHERE p.highway = 'turning_circle' OR p.highway = 'turning_loop'\n  ORDER BY p.way, v.prio\n) AS turning_circle_fill",
        "geometry_field": "way",
        "type": "sqlite",
        "file": "test_db4.sqlite",
        "extent": ""
      },
      "extent": [
        -180,
        -85.05112877980659,
        180,
        85.05112877980659
      ],
      "properties": {
        "minzoom": 15
      },
      "advanced": {},
      "status": "off",
      "layerId": "turning-circle-fill"
    },
    {
      "geometry": "linestring",
      "class": "",
      "id": "aerialways",
      "srs-name": "WGS84",
      "srs": "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs",
      "Datasource": {
        "table": "(SELECT\n    id,way,\n    aerialway\n  FROM lines\n  WHERE aerialway IS NOT NULL\n) AS aerialways",
        "geometry_field": "way",
        "type": "sqlite",
        "file": "test_db4.sqlite",
        "extent": ""
      },
      "extent": [
        -180,
        -85.05112877980659,
        180,
        85.05112877980659
      ],
      "properties": {
        "minzoom": 12
      },
      "advanced": {},
      "layerId": "aerialways"
    },
    {
      "geometry": "linestring",
      "class": "",
      "id": "roads-low-zoom",
      "srs-name": "WGS84",
      "srs": "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs",
      "Datasource": {
        "table": "(SELECT\n    id,way,\n    COALESCE(\n      ('highway_' || (CASE WHEN substr(highway, length(highway)-3, 4) = 'link' THEN substr(highway, 0, length(highway)-4) ELSE highway end)),\n      ('railway_' || (CASE WHEN (railway = 'rail' AND service IN ('spur', 'siding', 'yard')) THEN 'INT-spur-siding-yard' \n                           WHEN railway IN ('rail', 'tram', 'light_rail', 'funicular', 'narrow_gauge') THEN railway ELSE NULL END))\n    ) AS feature,\n    CASE WHEN tunnel = 'yes' OR tunnel = 'building_passage' OR covered = 'yes' THEN 'yes' ELSE 'no' END AS int_tunnel,\n    CASE WHEN substr(highway, length(highway)-3, 4) = 'link' THEN 'yes' ELSE 'no' END AS link,\n    CASE WHEN surface IN ('unpaved', 'compacted', 'dirt', 'earth', 'fine_gravel', 'grass', 'grass_paver', 'gravel', 'ground',\n                          'mud', 'pebblestone', 'salt', 'sand', 'woodchips', 'clay') THEN 'unpaved'\n      WHEN surface IN ('paved', 'asphalt', 'cobblestone', 'cobblestone:flattened', 'sett', 'concrete', 'concrete:lanes',\n                          'concrete:plates', 'paving_stones', 'metal', 'wood') THEN 'paved'\n      ELSE NULL\n    END AS int_surface\n  FROM lines\n  WHERE highway IS NOT NULL\n    OR (railway IS NOT NULL AND railway != 'preserved'\n      AND (service IS NULL OR service NOT IN ('spur', 'siding', 'yard')))\n  ORDER BY z_order\n) AS roads_low_zoom",
        "geometry_field": "way",
        "type": "sqlite",
        "file": "test_db4.sqlite",
        "extent": ""
      },
      "extent": [
        -180,
        -85.05112877980659,
        180,
        85.05112877980659
      ],
      "properties": {
        "maxzoom": 9,
        "minzoom": 5
      },
      "advanced": {},
      "layerId": "roads-low-zoom"
    },
    {
      "geometry": "linestring",
      "class": "water-lines",
      "id": "waterway-bridges",
      "srs-name": "WGS84",
      "srs": "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs",
      "Datasource": {
        "table": "(SELECT\n    id,way,\n    waterway,\n    name,\n    intermittent,\n    CASE WHEN tunnel IN ('yes', 'culvert') THEN 'yes' ELSE 'no' END AS int_tunnel,\n    'yes' AS bridge\n  FROM lines\n  WHERE waterway IN ('river', 'canal', 'derelict_canal', 'stream', 'drain', 'ditch', 'wadi')\n    AND bridge IN ('yes', 'aqueduct')\n  ORDER BY z_order\n) AS waterway_bridges",
        "type": "sqlite",
        "file": "test_db4.sqlite",
        "geometry_field": "way",
        "attachdb": "",
        "extent": ""
      },
      "extent": [
        -180,
        -85.05112877980659,
        180,
        85.05112877980659
      ],
      "properties": {
        "minzoom": 15
      },
      "advanced": {},
      "layerId": "waterway-bridges"
    },
    {
      "geometry": "linestring",
      "class": "bridges-fill bridges-casing access",
      "id": "bridges",
      "srs-name": "WGS84",
      "srs": "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs",
      "Datasource": {
        "table": "(SELECT\n    id,way,\n    (CASE WHEN substr(feature, length(feature)-3, 4) = 'link' THEN substr(feature, 0, length(feature)-4) ELSE feature END) AS feature,\n    horse,\n    foot,\n    bicycle,\n    tracktype,\n    int_surface,\n    access,\n    construction,\n    service,\n    link,\n    layernotnull\n  FROM ( -- subselect that contains both roads and rail/aero\n    SELECT\n        id,way,\n        ('highway_' || highway) AS feature, --only motorway to tertiary links are accepted later on\n        horse,\n        foot,\n        bicycle,\n        tracktype,\n        CASE WHEN surface IN ('unpaved', 'compacted', 'dirt', 'earth', 'fine_gravel', 'grass', 'grass_paver', 'gravel', 'ground',\n                              'mud', 'pebblestone', 'salt', 'sand', 'woodchips', 'clay') THEN 'unpaved'\n          WHEN surface IN ('paved', 'asphalt', 'cobblestone', 'cobblestone:flattened', 'sett', 'concrete', 'concrete:lanes',\n                              'concrete:plates', 'paving_stones', 'metal', 'wood') THEN 'paved'\n          ELSE NULL\n        END AS int_surface,\n        CASE WHEN access IN ('destination') THEN CAST('destination' AS text)\n          WHEN access IN ('no', 'private') THEN CAST('no' AS text)\n          ELSE NULL\n        END AS access,\n        construction,\n        CASE\n          WHEN service IN ('parking_aisle', 'drive-through', 'driveway') THEN CAST('INT-minor' AS text)\n          ELSE CAST('INT-normal' AS text)\n        END AS service,\n        CASE\n          WHEN substr(highway, length(highway)-3, 4) = 'link' THEN 'yes'\n          ELSE 'no'\n        END AS link,\n        CASE WHEN layer is not NULL THEN CAST(layer AS integer) ELSE 0 END AS layernotnull\n      FROM lines\n      WHERE bridge IN ('yes', 'boardwalk', 'cantilever', 'covered', 'low_water_crossing', 'movable', 'trestle', 'viaduct')\n        AND highway IS NOT NULL -- end of road select\n    UNION ALL\n    SELECT\n        id,way,\n        COALESCE(\n          ('railway_' || (CASE WHEN railway = 'preserved' AND service IN ('spur', 'siding', 'yard') THEN CAST('INT-preserved-ssy' AS text) \n                               WHEN (railway = 'rail' AND service IN ('spur', 'siding', 'yard')) THEN 'INT-spur-siding-yard' \n                               WHEN (railway = 'tram' AND service IN ('spur', 'siding', 'yard')) THEN 'tram-service' ELSE railway END)),\n          ('aeroway_' || aeroway)\n        ) AS feature,\n        horse,\n        foot,\n        bicycle,\n        tracktype,\n        'null',\n        CASE\n          WHEN access IN ('destination') THEN CAST('destination' AS text)\n          WHEN access IN ('no', 'private') THEN CAST('no' AS text)\n          ELSE NULL\n        END AS access,\n        construction,\n        CASE WHEN service IN ('parking_aisle', 'drive-through', 'driveway') THEN CAST('INT-minor' AS text) ELSE CAST('INT-normal' AS text) END AS service,\n        'no' AS link,\n        CASE WHEN layer is not NULL THEN CAST(layer AS integer) ELSE 0 END AS layernotnull\n      FROM lines\n      WHERE bridge IN ('yes', 'boardwalk', 'cantilever', 'covered', 'low_water_crossing', 'movable', 'trestle', 'viaduct')\n        AND (railway IS NOT NULL OR aeroway IS NOT NULL) -- end of rail/aero select\n    ) AS features\n  JOIN  ordertable\n    USING (feature)\n  ORDER BY\n    layernotnull,\n    prio,\n    CASE WHEN access IN ('no', 'private') THEN 0 WHEN access IN ('destination') THEN 1 ELSE 2 END,\n    CASE WHEN int_surface IN ('unpaved') THEN 0 ELSE 2 END\n) AS bridges",
        "type": "sqlite",
        "file": "test_db4.sqlite",
        "geometry_field": "way",
        "attachdb": "",
        "extent": ""
      },
      "extent": [
        -180,
        -85.05112877980659,
        180,
        85.05112877980659
      ],
      "properties": {
        "group-by": "layernotnull",
        "minzoom": 9
      },
      "advanced": {},
      "layerId": "bridges"
    },
    {
      "geometry": "linestring",
      "class": "",
      "id": "guideways",
      "srs-name": "WGS84",
      "srs": "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs",
      "Datasource": {
        "table": "(SELECT\n    id,way\n  FROM lines\n  WHERE highway = 'bus_guideway'\n) AS guideways",
        "geometry_field": "way",
        "type": "sqlite",
        "file": "test_db4.sqlite",
        "extent": ""
      },
      "extent": [
        -180,
        -85.05112877980659,
        180,
        85.05112877980659
      ],
      "properties": {
        "minzoom": 13
      },
      "advanced": {},
      "layerId": "guideways"
    },
    {
      "geometry": "linestring",
      "class": "",
      "srs-name": "WGS84",
      "srs": "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs",
      "Datasource": {
        "table": "(SELECT\n    id,way,\n    admin_level\n  FROM lines\n  WHERE boundary = 'administrative'\n    AND admin_level IN ('0', '1', '2', '3', '4')\n    AND osm_id < 0\n  ORDER BY admin_level DESC\n) AS admin_low_zoom",
        "geometry_field": "way",
        "type": "sqlite",
        "file": "test_db4.sqlite",
        "extent": ""
      },
      "extent": [
        -180,
        -85.05112877980659,
        180,
        85.05112877980659
      ],
      "id": "admin-low-zoom",
      "properties": {
        "maxzoom": 10,
        "minzoom": 4
      },
      "advanced": {},
      "status": "off",
      "layerId": "admin-low-zoom"
    },
    {
      "geometry": "linestring",
      "class": "",
      "id": "admin-mid-zoom",
      "srs-name": "WGS84",
      "srs": "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs",
      "Datasource": {
        "table": "(SELECT\n    id,way,\n    admin_level\n  FROM lines\n  WHERE boundary = 'administrative'\n    AND admin_level IN ('0', '1', '2', '3', '4', '5', '6', '7', '8')\n    AND osm_id < 0\n  ORDER BY admin_level DESC\n) AS admin_mid_zoom",
        "geometry_field": "way",
        "type": "sqlite",
        "file": "test_db4.sqlite",
        "extent": ""
      },
      "extent": [
        -180,
        -85.05112877980659,
        180,
        85.05112877980659
      ],
      "properties": {
        "maxzoom": 12,
        "minzoom": 11
      },
      "advanced": {},
      "status": "off",
      "layerId": "admin-mid-zoom"
    },
    {
      "geometry": "linestring",
      "class": "",
      "id": "admin-high-zoom",
      "srs-name": "WGS84",
      "srs": "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs",
      "Datasource": {
        "table": "(SELECT\n    id,way,\n    admin_level\n  FROM lines\n  WHERE boundary = 'administrative'\n    AND admin_level IN ('0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10')\n    AND osm_id < 0\n  ORDER BY CAST(admin_level AS integer) DESC -- With 10 as a valid value, we need to do a numeric ordering, not a text ordering\n) AS admin_high_zoom",
        "geometry_field": "way",
        "type": "sqlite",
        "file": "test_db4.sqlite",
        "extent": ""
      },
      "extent": [
        -180,
        -85.05112877980659,
        180,
        85.05112877980659
      ],
      "properties": {
        "minzoom": 13
      },
      "advanced": {},
      "status": "off",
      "layerId": "admin-high-zoom"
    },
    {
      "geometry": "linestring",
      "class": "",
      "id": "power-minorline",
      "srs-name": "WGS84",
      "srs": "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs",
      "Datasource": {
        "table": "(SELECT\n    way\n  FROM lines\n  WHERE power = 'minor_line'\n) AS power_minorline",
        "geometry_field": "way",
        "type": "sqlite",
        "file": "test_db4.sqlite",
        "extent": ""
      },
      "extent": [
        -180,
        -85.05112877980659,
        180,
        85.05112877980659
      ],
      "properties": {
        "minzoom": 16
      },
      "advanced": {},
      "status": "off",
      "layerId": "power-minorline"
    },
    {
      "geometry": "linestring",
      "class": "",
      "id": "power-line",
      "srs-name": "WGS84",
      "srs": "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs",
      "Datasource": {
        "table": "(SELECT\n    way\n  FROM lines\n  WHERE power = 'line'\n) AS power_line",
        "geometry_field": "way",
        "type": "sqlite",
        "file": "test_db4.sqlite",
        "extent": ""
      },
      "extent": [
        -180,
        -85.05112877980659,
        180,
        85.05112877980659
      ],
      "properties": {
        "minzoom": 14
      },
      "advanced": {},
      "status": "off",
      "layerId": "power-line"
    },
    {
      "geometry": "polygon",
      "class": "",
      "id": "nature-reserve-boundaries",
      "srs-name": "WGS84",
      "srs": "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs",
      "Datasource": {
        "table": "(SELECT\n    id,way,\n    name,\n    boundary,\n    way_area/NULLIF(CAST(!pixel_width! AS real)*CAST(!pixel_height! AS real0,0) AS way_pixels\n  FROM polygons\n  WHERE (boundary = 'national_park' OR leisure = 'nature_reserve')\n    AND building IS NULL\n    AND way_area > 0.01*CAST(!pixel_width! AS real)*CAST(!pixel_height! AS real)\n) AS national_park_boundaries",
        "geometry_field": "way",
        "type": "sqlite",
        "file": "test_db4.sqlite",
        "extent": ""
      },
      "extent": [
        -180,
        -85.05112877980659,
        180,
        85.05112877980659
      ],
      "properties": {
        "minzoom": 7
      },
      "advanced": {},
      "status": "off",
      "layerId": "nature-reserve-boundaries"
    },
    {
      "geometry": "polygon",
      "class": "",
      "id": "tourism-boundary",
      "srs-name": "WGS84",
      "srs": "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs",
      "Datasource": {
        "table": "(SELECT\n    id,way,\n    way_area/NULLIF(CAST(!pixel_width! AS real)*CAST(!pixel_height! AS real0,0) AS way_pixels,\n    name,\n    tourism\n  FROM polygons\n  WHERE tourism = 'theme_park'\n    OR tourism = 'zoo'\n) AS tourism_boundary",
        "geometry_field": "way",
        "type": "sqlite",
        "file": "test_db4.sqlite",
        "extent": ""
      },
      "extent": [
        -180,
        -85.05112877980659,
        180,
        85.05112877980659
      ],
      "properties": {
        "minzoom": 10
      },
      "advanced": {},
      "status": "off",
      "layerId": "tourism-boundary"
    },
    {
      "geometry": "polygon",
      "class": "",
      "id": "trees",
      "srs-name": "WGS84",
      "srs": "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs",
      "Datasource": {
        "table": "(SELECT\n    id,way, \"natural\"\n  FROM points\n  WHERE \"natural\" = 'tree'\nUNION ALL\nSELECT\n    id,way, \"natural\"\n  FROM lines\n  WHERE \"natural\" = 'tree_row'\n) AS trees",
        "geometry_field": "way",
        "type": "sqlite",
        "file": "test_db4.sqlite",
        "extent": ""
      },
      "extent": [
        -180,
        -85.05112877980659,
        180,
        85.05112877980659
      ],
      "properties": {
        "minzoom": 16
      },
      "advanced": {},
      "status": "off",
      "layerId": "trees"
    },
    {
      "geometry": "point",
      "class": "country state",
      "id": "placenames-large",
      "srs-name": "WGS84",
      "srs": "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs",
      "Datasource": {
        "table": "(SELECT\n    id,way,\n    way_area/NULLIF(CAST(!pixel_width! AS real)*CAST(!pixel_height! AS real0,0) AS way_pixels,\n    name,\n    ref,\n    admin_level\n  FROM polygons\n  WHERE boundary = 'administrative'\n    AND admin_level IN ('2', '4')\n    AND name IS NOT NULL\n    AND way_area > CAST(750*!pixel_width!::real*!pixel_height! AS real) -- only labels for larger areas are displayed\n  ORDER BY admin_level ASC, way_area DESC\n) AS placenames_large",
        "geometry_field": "way",
        "type": "sqlite",
        "file": "test_db4.sqlite",
        "extent": ""
      },
      "extent": [
        -180,
        -85.05112877980659,
        180,
        85.05112877980659
      ],
      "properties": {
        "minzoom": 2
      },
      "advanced": {},
      "status": "off",
      "layerId": "placenames-large"
    },
    {
      "geometry": "point",
      "class": "",
      "id": "placenames-medium",
      "srs-name": "WGS84",
      "srs": "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs",
      "Datasource": {
        "table": "(SELECT\n    id,way,\n    name,\n    score,\n    CASE\n      WHEN (place = 'city' OR (capital = 'yes' AND score >= 100000)) THEN 1\n      ELSE 2\n    END as category\n  FROM \n    (SELECT\n        id,way,\n        place,\n        name,\n        capital,\n        (\n          (CASE\n            WHEN (population  REGEXP  '^[0-9]{1,8}$') THEN CAST(population AS INTEGER)\n            WHEN (place = 'city') THEN 100000\n            WHEN (place = 'town') THEN 1000\n            ELSE 1\n          END)\n          *\n          (CASE\n            WHEN (capital = 'yes') THEN 3\n            WHEN (capital = '4') THEN 2\n            ELSE 1\n          END)\n        ) AS score\n      FROM points\n      WHERE place IN ('city', 'town')\n        AND name IS NOT NULL\n    ) as p\n  ORDER BY score DESC, length(name) DESC, name\n) AS placenames_medium",
        "geometry_field": "way",
        "type": "sqlite",
        "file": "test_db4.sqlite",
        "extent": ""
      },
      "extent": [
        -180,
        -85.05112877980659,
        180,
        85.05112877980659
      ],
      "properties": {
        "maxzoom": 15,
        "minzoom": 4
      },
      "advanced": {},
      "status": "off",
      "layerId": "placenames-medium"
    },
    {
      "geometry": "point",
      "class": "",
      "id": "placenames-small",
      "srs-name": "WGS84",
      "srs": "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs",
      "Datasource": {
        "table": "(SELECT\n    id,way,\n    place,\n    name\n  FROM points\n  WHERE place IN ('suburb', 'village', 'hamlet', 'neighbourhood', 'locality', 'isolated_dwelling', 'farm')\n    AND name IS NOT NULL\n  ORDER BY CASE\n      WHEN place = 'suburb' THEN 3\n      WHEN place = 'village' THEN 4\n      WHEN place = 'hamlet' THEN 5\n      WHEN place = 'neighbourhood' THEN 6\n      WHEN place = 'locality' THEN 7\n      WHEN place = 'isolated_dwelling' THEN 8\n      WHEN place = 'farm' THEN 9\n    END ASC, length(name) DESC, name\n) AS placenames_small",
        "geometry_field": "way",
        "type": "sqlite",
        "file": "test_db4.sqlite",
        "extent": ""
      },
      "extent": [
        -180,
        -85.05112877980659,
        180,
        85.05112877980659
      ],
      "properties": {
        "minzoom": 12
      },
      "advanced": {},
      "status": "off",
      "layerId": "placenames-small"
    },
    {
      "geometry": "point",
      "class": "stations",
      "id": "stations",
      "srs-name": "WGS84",
      "srs": "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs",
      "Datasource": {
        "table": "(SELECT\n    id,way,\n    name,\n    railway,\n    aerialway,\n    CASE railway \n      WHEN 'station' THEN 1 \n      WHEN 'subway_entrance' THEN 3\n      ELSE 2\n    END\n      AS prio\n  FROM points\n  WHERE railway IN ('station', 'halt', 'tram_stop', 'subway_entrance')\n    OR aerialway = 'station'\n  ORDER BY prio\n) AS stations",
        "geometry_field": "way",
        "type": "sqlite",
        "file": "test_db4.sqlite",
        "extent": ""
      },
      "extent": [
        -180,
        -85.05112877980659,
        180,
        85.05112877980659
      ],
      "properties": {
        "minzoom": 12
      },
      "advanced": {},
      "status": "off",
      "layerId": "stations"
    },
    {
      "geometry": "polygon",
      "class": "stations",
      "id": "stations-poly",
      "srs-name": "WGS84",
      "srs": "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs",
      "Datasource": {
        "table": "(SELECT\n    id,way,\n    name,\n    railway,\n    aerialway\nFROM polygons\nWHERE railway IN ('station', 'halt', 'tram_stop')\n  OR aerialway = 'station'\n) AS stations_poly",
        "geometry_field": "way",
        "type": "sqlite",
        "file": "test_db4.sqlite",
        "extent": ""
      },
      "extent": [
        -180,
        -85.05112877980659,
        180,
        85.05112877980659
      ],
      "properties": {
        "minzoom": 12
      },
      "advanced": {},
      "status": "off",
      "layerId": "stations-poly"
    },
    {
      "geometry": "polygon",
      "class": "points",
      "id": "amenity-points-poly",
      "srs-name": "WGS84",
      "srs": "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs",
      "Datasource": {
        "table": "(SELECT\n    id,way,\n    COALESCE(\n      'aeroway_' || CASE WHEN aeroway IN ('helipad', 'aerodrome') THEN aeroway ELSE NULL END,\n      'tourism_' || CASE WHEN tourism IN ('artwork', 'alpine_hut', 'camp_site', 'caravan_site', 'chalet', 'guest_house', \n                                          'hostel', 'hotel', 'motel', 'information', 'museum', 'picnic_site') THEN tourism ELSE NULL END,\n      'amenity_' || CASE WHEN amenity IN ('shelter', 'atm', 'bank', 'bar', 'bicycle_rental', 'bus_station', 'cafe', \n                                          'car_rental', 'car_wash', 'cinema', 'clinic', 'community_centre', 'fire_station', 'fountain',\n                                          'fuel', 'hospital', 'ice_cream', 'embassy', 'library', 'courthouse', 'townhall', 'parking', \n                                          'bicycle_parking', 'motorcycle_parking', 'pharmacy', 'doctors', 'dentist', 'place_of_worship', \n                                          'police', 'post_box', 'post_office', 'pub', 'biergarten', 'recycling', 'restaurant', 'food_court', \n                                          'fast_food', 'telephone', 'emergency_phone', 'taxi', 'theatre', 'toilets', 'drinking_water', \n                                          'prison', 'hunting_stand', 'nightclub', 'veterinary', 'social_facility',\n                                          'charging_station') THEN amenity ELSE NULL END,\n      'shop_' || CASE WHEN shop IN ('supermarket', 'bag', 'bakery', 'beauty', 'books', 'butcher', 'clothes', 'computer', \n                                    'confectionery', 'fashion', 'convenience', 'department_store', 'doityourself', 'hardware', 'fishmonger', 'florist', \n                                    'garden_centre', 'hairdresser', 'hifi', 'ice_cream', 'car', 'car_repair', 'bicycle', 'mall', 'pet', \n                                    'photo', 'photo_studio', 'photography', 'seafood', 'shoes', 'alcohol', 'gift', 'furniture', 'kiosk', \n                                    'mobile_phone', 'motorcycle', 'musical_instrument', 'newsagent', 'optician', 'jewelry', 'jewellery', \n                                    'electronics', 'chemist', 'toys', 'travel_agency', 'car_parts', 'greengrocer', 'farm', 'stationery', \n                                    'laundry', 'dry_cleaning', 'beverages', 'perfumery', 'cosmetics', 'variety_store', 'wine', 'outdoor', \n                                    'copyshop', 'sports') THEN shop \n                      WHEN shop IN ('accessories', 'antiques', 'appliance', 'art', 'baby_goods', 'bathroom_furnishing', \n                                    'bed', 'boat', 'bookmaker', 'boutique', 'builder', 'building_materials', 'camera', 'car_service', \n                                    'carpet', 'charity', 'cheese', 'chocolate', 'coffee', 'communication', 'craft', 'curtain', 'dairy', \n                                    'deli', 'discount', 'e-cigarette', 'electrical', 'energy', 'erotic', 'estate_agent', \n                                    'fabric', 'fishing', 'flooring', 'food', 'frame', 'frozen_food', 'funeral_directors', 'furnace', \n                                    'gallery', 'games', 'gas', 'general', 'glaziery', 'grocery', 'health', 'health_food', 'hearing_aids', \n                                    'herbalist', 'hobby', 'household', 'houseware', 'hunting', 'interior_decoration', 'kitchen', \n                                    'leather', 'lighting', 'locksmith', 'lottery', 'market', 'massage', 'medical', 'medical_supply', 'money_lender', \n                                    'motorcycle_repair', 'music', 'office_supplies', 'organic', 'paint', 'pastry', 'pawnbroker', \n                                    'phone', 'pottery', 'printing', 'radiotechnics', 'real_estate', 'religion', 'rental', 'salon', \n                                    'scuba_diving', 'second_hand', 'sewing', 'shoe_repair', 'shopping_centre', 'solarium', 'souvenir',  \n                                    'tailor', 'tanning', 'tattoo', 'tea', 'ticket', 'tiles', 'tobacco', 'trade', 'tyres', 'vacuum_cleaner', 'video', \n                                    'video_games', 'watches', 'wholesale', 'yes') THEN 'other' ELSE NULL END,\n      'leisure_' || CASE WHEN leisure IN ('water_park', 'playground', 'miniature_golf', 'golf_course', 'picnic_table') THEN leisure ELSE NULL END,\n      'man_made_' || CASE WHEN man_made IN ('mast', 'water_tower', 'lighthouse', 'windmill', 'obelisk') THEN man_made ELSE NULL END,\n      'natural_' || CASE WHEN \"natural\" IN ('spring') THEN \"natural\" ELSE NULL END,\n      'historic_' || CASE WHEN historic IN ('memorial', 'monument', 'archaeological_site') THEN historic ELSE NULL END,\n      'highway_'|| CASE WHEN highway IN ('bus_stop', 'elevator', 'traffic_signals') THEN highway ELSE NULL END,\n      'power_' || CASE WHEN power IN ('generator') THEN power ELSE NULL END,\n      'tourism_' || CASE WHEN tourism IN ('viewpoint') THEN tourism ELSE NULL END\n    ) AS feature,\n    access,\n    religion,\n    denomination,\n    \"generator:source\",\n    power_source,\n    way_area/NULLIF(CAST(!pixel_width! AS real)*CAST(!pixel_height! AS real0,0) AS way_pixels\n  FROM polygons\n  -- The upcoming where clause is needed for performance only, as the CASE statements would end up doing the equivalent filtering\n  WHERE aeroway IN ('helipad', 'aerodrome')\n    OR tourism IN ('artwork', 'alpine_hut', 'camp_site', 'caravan_site', 'chalet', 'guest_house', 'hostel', \n                   'hotel', 'motel', 'information', 'museum', 'viewpoint', 'picnic_site')\n    OR amenity IN ('shelter', 'atm', 'bank', 'bar', 'bicycle_rental', 'bus_station', 'cafe', \n                   'car_rental', 'car_wash', 'cinema', 'clinic', 'community_centre',\n                   'fire_station', 'fountain', 'fuel', 'hospital', 'ice_cream', 'embassy', 'library', 'courthouse', \n                   'townhall', 'parking', 'bicycle_parking', 'motorcycle_parking', 'pharmacy', 'doctors', \n                   'dentist', 'place_of_worship', 'police', 'post_box', 'post_office', 'pub', 'biergarten', \n                   'recycling', 'restaurant', 'food_court', 'fast_food', 'telephone', 'emergency_phone', 'taxi', \n                   'theatre', 'toilets', 'drinking_water', 'prison', 'hunting_stand', 'nightclub', 'veterinary',\n                   'social_facility', 'charging_station')\n    OR shop IS NOT NULL -- skip checking a huge list and use a null check\n    OR leisure IN ('water_park', 'playground', 'miniature_golf', 'golf_course', 'picnic_table')\n    OR man_made IN ('mast', 'water_tower', 'lighthouse', 'windmill', 'obelisk')\n    OR \"natural\" IN ('spring')\n    OR historic IN ('memorial', 'monument', 'archaeological_site')\n    OR highway IN ('bus_stop', 'elevator', 'traffic_signals')\n    OR (power = 'generator' AND (\"generator:source\" = 'wind' OR power_source = 'wind'))\n  ORDER BY way_area desc\n) AS amenity_points_poly",
        "geometry_field": "way",
        "type": "sqlite",
        "file": "test_db4.sqlite",
        "extent": ""
      },
      "extent": [
        -180,
        -85.05112877980659,
        180,
        85.05112877980659
      ],
      "properties": {
        "minzoom": 10
      },
      "advanced": {},
      "status": "off",
      "layerId": "amenity-points-poly"
    },
    {
      "geometry": "point",
      "class": "points",
      "id": "amenity-points",
      "srs-name": "WGS84",
      "srs": "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs",
      "Datasource": {
        "table": "(SELECT\n    id,way,\n    COALESCE(\n      'aeroway_' || CASE WHEN aeroway IN ('helipad', 'aerodrome') THEN aeroway ELSE NULL END,\n      'tourism_' || CASE WHEN tourism IN ('artwork', 'alpine_hut', 'camp_site', 'caravan_site', 'chalet', 'guest_house', 'hostel', \n                                          'hotel', 'motel', 'information', 'museum', 'picnic_site') THEN tourism ELSE NULL END,\n      'amenity_' || CASE WHEN amenity IN ('shelter', 'atm', 'bank', 'bar', 'bicycle_rental', 'bus_station', 'cafe', \n                                          'car_rental', 'car_wash', 'cinema', 'clinic', 'community_centre', 'fire_station', 'fountain',\n                                          'fuel', 'hospital', 'ice_cream', 'embassy', 'library', 'courthouse', 'townhall', 'parking', \n                                          'bicycle_parking', 'motorcycle_parking', 'pharmacy', 'doctors', 'dentist', 'place_of_worship', \n                                          'police', 'post_box', 'post_office', 'pub', 'biergarten', 'recycling', 'restaurant', 'food_court', \n                                          'fast_food', 'telephone', 'emergency_phone', 'taxi', 'theatre', 'toilets', 'drinking_water', \n                                          'prison', 'hunting_stand', 'nightclub', 'veterinary', 'social_facility',\n                                          'charging_station') THEN amenity ELSE NULL END,\n      'shop_' || CASE WHEN shop IN ('supermarket', 'bag', 'bakery', 'beauty', 'books', 'butcher', 'clothes', 'computer', 'confectionery', \n                                    'fashion', 'convenience', 'department_store', 'doityourself', 'hardware', 'fishmonger', 'florist', 'garden_centre', \n                                    'hairdresser', 'hifi', 'ice_cream', 'car', 'car_repair', 'bicycle', 'mall', 'pet', 'photo', 'photo_studio', \n                                    'photography', 'seafood', 'shoes', 'alcohol', 'gift', 'furniture', 'kiosk', 'mobile_phone', 'motorcycle', \n                                    'musical_instrument', 'newsagent', 'optician', 'jewelry', 'jewellery', 'electronics', 'chemist', 'toys', \n                                    'travel_agency', 'car_parts', 'greengrocer', 'farm', 'stationery', 'laundry', 'dry_cleaning', 'beverages', \n                                    'perfumery', 'cosmetics', 'variety_store', 'wine', 'outdoor', 'copyshop', 'sports') THEN shop \n                      WHEN shop IN ('accessories', 'antiques', 'appliance', 'art', 'baby_goods', 'bathroom_furnishing', 'bed',  \n                                    'boat', 'bookmaker', 'boutique', 'builder', 'building_materials', 'camera', 'car_service', 'carpet', 'charity', \n                                    'cheese', 'chocolate', 'coffee', 'communication', 'craft', 'curtain', 'dairy', 'deli',   \n                                    'discount', 'e-cigarette', 'electrical', 'energy', 'erotic', 'estate_agent', 'fabric', 'fishing', \n                                    'flooring', 'food', 'frame', 'frozen_food', 'funeral_directors', 'furnace', 'gallery', 'games', 'gas',  \n                                    'general', 'glaziery', 'grocery', 'health', 'health_food', 'hearing_aids', 'herbalist', 'hobby', 'household',  \n                                    'houseware', 'hunting', 'interior_decoration', 'kitchen', 'leather', 'lighting', 'locksmith', 'lottery',  \n                                    'market', 'massage', 'medical', 'medical_supply', 'money_lender', 'motorcycle_repair', 'music', 'office_supplies',  \n                                    'organic', 'paint', 'pastry', 'pawnbroker', 'phone', 'pottery', 'printing', 'radiotechnics', \n                                    'real_estate', 'religion', 'rental', 'salon', 'scuba_diving', 'second_hand', 'sewing', 'shoe_repair', 'shopping_centre', \n                                    'solarium', 'souvenir', 'tailor', 'tanning', 'tattoo', 'tea', 'ticket', 'tiles', 'tobacco', 'trade', 'tyres', \n                                    'vacuum_cleaner', 'video', 'video_games', 'watches', 'wholesale', 'yes') THEN 'other' ELSE NULL END,\n      'leisure_' || CASE WHEN leisure IN ('water_park', 'playground', 'miniature_golf', 'golf_course', 'picnic_table', 'slipway',\n                                          'dog_park') THEN leisure ELSE NULL END,\n      'man_made_' || CASE WHEN man_made IN ('mast', 'water_tower', 'lighthouse', 'windmill', 'obelisk') THEN man_made ELSE NULL END,\n      'natural_' || CASE WHEN \"natural\" IN ('peak', 'volcano', 'saddle', 'spring', 'cave_entrance') THEN \"natural\" ELSE NULL END,\n      'historic_' || CASE WHEN historic IN ('memorial', 'monument', 'archaeological_site') THEN historic ELSE NULL END,\n      'highway_'|| CASE WHEN highway IN ('bus_stop', 'elevator', 'traffic_signals', 'ford') THEN highway ELSE NULL END,\n      'power_' || CASE WHEN power IN ('generator') THEN power ELSE NULL END,\n      'tourism_' || CASE WHEN tourism IN ('viewpoint') THEN tourism ELSE NULL END,\n      'man_made_' || CASE WHEN man_made IN ('cross') THEN man_made ELSE NULL END,\n      'historic_' || CASE WHEN historic IN ('wayside_cross') THEN historic ELSE NULL END\n    ) AS feature,\n    access,\n    CASE\n      WHEN \"natural\" IN ('peak', 'volcano', 'saddle') THEN\n        CASE\n          WHEN ele  REGEXP  '^-?\\d{1,4}(\\.\\d+)?$' THEN CAST(ele AS NUMERIC)\n          ELSE NULL\n        END\n      ELSE NULL\n    END AS score,\n    religion,\n    denomination,\n    \"generator:source\",\n    power_source,\n    NULL AS way_pixels\n  FROM points\n  -- The upcoming where clause is needed for performance only, as the CASE statements would end up doing the equivalent filtering\n  WHERE aeroway IN ('helipad', 'aerodrome')\n    OR tourism IN ('artwork', 'alpine_hut', 'camp_site', 'caravan_site', 'chalet', 'guest_house', 'hostel', \n                   'hotel', 'motel', 'information', 'museum', 'viewpoint', 'picnic_site')\n    OR amenity IN ('shelter', 'atm', 'bank', 'bar', 'bicycle_rental', 'bus_station', 'cafe', \n                   'car_rental',  'car_wash', 'cinema', 'clinic', 'community_centre',\n                   'fire_station', 'fountain', 'fuel', 'hospital', 'ice_cream', 'embassy', 'library', 'courthouse', \n                   'townhall', 'parking', 'bicycle_parking', 'motorcycle_parking', 'pharmacy', 'doctors', \n                   'dentist', 'place_of_worship', 'police', 'post_box', 'post_office', 'pub', 'biergarten', \n                   'recycling', 'restaurant', 'food_court', 'fast_food', 'telephone', 'emergency_phone', \n                   'taxi', 'theatre', 'toilets', 'drinking_water', 'prison', 'hunting_stand', 'nightclub', \n                   'veterinary', 'social_facility', 'charging_station')\n    OR shop IS NOT NULL -- skip checking a huge list and use a null check\n    OR leisure IN ('water_park', 'playground', 'miniature_golf', 'golf_course', 'picnic_table', 'slipway',\n                   'dog_park')\n    OR man_made IN ('mast', 'water_tower', 'lighthouse', 'windmill', 'cross', 'obelisk')\n    OR \"natural\" IN ('peak', 'volcano', 'saddle', 'spring', 'cave_entrance')\n    OR historic IN ('memorial', 'monument', 'archaeological_site', 'wayside_cross')\n    OR highway IN ('bus_stop', 'elevator', 'traffic_signals', 'ford')\n    OR (power = 'generator' AND (\"generator:source\" = 'wind' OR power_source = 'wind'))\n  ORDER BY score DESC NULLS LAST\n  ) AS amenity_points",
        "geometry_field": "way",
        "type": "sqlite",
        "file": "test_db4.sqlite",
        "extent": ""
      },
      "extent": [
        -180,
        -85.05112877980659,
        180,
        85.05112877980659
      ],
      "properties": {
        "minzoom": 10
      },
      "advanced": {},
      "status": "off",
      "layerId": "amenity-points"
    },
    {
      "geometry": "point",
      "class": "",
      "id": "power-towers",
      "srs-name": "WGS84",
      "srs": "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs",
      "Datasource": {
        "table": "(SELECT\n    way\n  FROM points\n  WHERE power = 'tower'\n) AS power_towers",
        "geometry_field": "way",
        "type": "sqlite",
        "file": "test_db4.sqlite",
        "extent": ""
      },
      "extent": [
        -180,
        -85.05112877980659,
        180,
        85.05112877980659
      ],
      "properties": {
        "minzoom": 14
      },
      "advanced": {},
      "status": "off",
      "layerId": "power-towers"
    },
    {
      "geometry": "point",
      "class": "",
      "id": "power-poles",
      "srs-name": "WGS84",
      "srs": "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs",
      "Datasource": {
        "table": "(SELECT\n    way\n  FROM points\n  WHERE power = 'pole'\n) AS power_poles",
        "geometry_field": "way",
        "type": "sqlite",
        "file": "test_db4.sqlite",
        "extent": ""
      },
      "extent": [
        -180,
        -85.05112877980659,
        180,
        85.05112877980659
      ],
      "properties": {
        "minzoom": 16
      },
      "advanced": {},
      "status": "off",
      "layerId": "power-poles"
    },
    {
      "geometry": "linestring",
      "class": "",
      "id": "roads-text-ref-low-zoom",
      "srs-name": "WGS84",
      "srs": "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs",
      "Datasource": {
        "table": "(SELECT\n    id,way,\n    highway,\n    height,\n    width,\n    ref as refs\n  FROM (\n    SELECT\n        id,way, highway,\n        (SELECT LENGTH(ref) - LENGTH(REPLACE(ref, '\n', ''))) as height,\n        (SELECT LENGTH(ref)) AS width,\n        ref\n \n        FROM lines\n          WHERE highway IN ('motorway', 'trunk', 'primary', 'secondary')\n          AND ref IS NOT NULL\n        )AS q\n  WHERE height <= 4 AND width <= 11) AS roads_text_ref_low_zoom",
        "type": "sqlite",
        "file": "test_db4.sqlite",
        "geometry_field": "way",
        "attachdb": "",
        "extent": ""
      },
      "extent": [
        -180,
        -85.05112877980659,
        180,
        85.05112877980659
      ],
      "properties": {
        "maxzoom": 12,
        "minzoom": 10
      },
      "advanced": {},
      "status": "off",
      "layerId": "roads-text-ref-low-zoom"
    },
    {
      "geometry": "point",
      "class": "",
      "id": "junctions",
      "srs-name": "WGS84",
      "srs": "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs",
      "Datasource": {
        "table": "(SELECT\n    id,way,\n    highway,\n    junction,\n    ref,\n    name\n  FROM points\n  WHERE highway = 'motorway_junction' OR highway = 'traffic_signals' OR junction = 'yes'\n) AS junctions",
        "type": "sqlite",
        "file": "test_db4.sqlite",
        "geometry_field": "way",
        "attachdb": "",
        "extent": ""
      },
      "extent": [
        -180,
        -85.05112877980659,
        180,
        85.05112877980659
      ],
      "properties": {
        "minzoom": 11
      },
      "advanced": {},
      "status": "off",
      "layerId": "junctions"
    },
    {
      "geometry": "polygon",
      "class": "",
      "id": "bridge-text",
      "srs-name": "WGS84",
      "srs": "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs",
      "Datasource": {
        "table": "(SELECT\n    id,way,\n    way_area/NULLIF(!pixel_width!*!pixel_height!,0) AS way_pixels,\n    man_made,\n    name\n  FROM polygons\n  WHERE man_made = 'bridge'\n) AS bridge_text",
        "type": "sqlite",
        "file": "test_db4.sqlite",
        "geometry_field": "way",
        "attachdb": "",
        "extent": ""
      },
      "extent": [
        -180,
        -85.05112877980659,
        180,
        85.05112877980659
      ],
      "properties": {
        "minzoom": 11
      },
      "advanced": {},
      "layerId": "bridge-text"
    },
    {
      "geometry": "linestring",
      "class": "",
      "id": "roads-text-ref",
      "srs-name": "WGS84",
      "srs": "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs",
      "Datasource": {
        "table": "(SELECT\n    id,way,\n    highway,\n    height,\n    width,\n    ref as refs\n  FROM (\n    SELECT\n        id,way,\n	COALESCE(\n              CASE WHEN highway IN ('motorway', 'trunk', 'primary', 'secondary', 'tertiary', 'unclassified', 'residential') THEN highway ELSE NULL END,\n              CASE WHEN aeroway IN ('runway', 'taxiway') THEN aeroway ELSE NULL END\n            ) AS highway,\n        (SELECT LENGTH(ref) - LENGTH(REPLACE(ref, '\n', ''))) as height,\n        (SELECT LENGTH(ref)) AS width,\n        ref\n          FROM lines\n            WHERE (highway IN ('motorway', 'trunk', 'primary', 'secondary', 'tertiary', 'unclassified', 'residential') OR aeroway IN ('runway', 'taxiway'))\n              AND ref IS NOT NULL\n       ) AS q\n  WHERE height <= 4 AND width <= 11) AS roads_text_ref",
        "type": "sqlite",
        "file": "test_db4.sqlite",
        "geometry_field": "way",
        "attachdb": "",
        "extent": ""
      },
      "extent": [
        -180,
        -85.05112877980659,
        180,
        85.05112877980659
      ],
      "properties": {
        "minzoom": 13
      },
      "advanced": {},
      "status": "off",
      "layerId": "roads-text-ref"
    },
    {
      "geometry": "polygon",
      "class": "",
      "id": "roads-area-text-name",
      "srs-name": "WGS84",
      "srs": "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs",
      "Datasource": {
        "table": "(SELECT\n    id,way,\n    way_area/NULLIF(CAST(!pixel_width! AS real)*CAST(!pixel_height! AS real0,0) AS way_pixels,\n    highway,\n    name\n  FROM polygons\n  WHERE highway IN ('residential', 'unclassified', 'pedestrian', 'service', 'footway', 'cycleway', 'living_street', 'track', 'path', 'platform')\n    OR railway IN ('platform')\n    AND name IS NOT NULL\n) AS roads_area_text_name",
        "type": "sqlite",
        "file": "test_db4.sqlite",
        "geometry_field": "way",
        "attachdb": "",
        "extent": ""
      },
      "extent": [
        -180,
        -85.05112877980659,
        180,
        85.05112877980659
      ],
      "properties": {
        "minzoom": 15
      },
      "advanced": {},
      "status": "off",
      "layerId": "roads-area-text-name"
    },
    {
      "geometry": "linestring",
      "class": "directions",
      "id": "roads-text-name",
      "srs-name": "WGS84",
      "srs": "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs",
      "Datasource": {
        "table": "(SELECT\n    id,way,\n    CASE WHEN substr(highway, length(highway)-3, 4) = 'link' THEN substr(highway, 0, length(highway)-4) ELSE highway END as highway,\n    CASE WHEN (tunnel = 'yes' OR tunnel = 'building_passage' OR covered = 'yes') THEN 'yes' ELSE 'no' END AS tunnel,\n    CASE WHEN construction IN ('service', 'footway', 'cycleway', 'bridleway', 'path', 'track') THEN 'yes' ELSE 'no' END AS int_construction_minor,\n    name,\n    CASE\n      WHEN oneway IN ('yes', '-1') THEN oneway\n      WHEN junction IN ('roundabout') AND (oneway IS NULL OR NOT oneway IN ('no', 'reversible')) THEN 'yes'\n      ELSE NULL\n    END AS oneway,\n    horse, bicycle\n  FROM lines\n  WHERE highway IN ('motorway', 'motorway_link', 'trunk', 'trunk_link', 'primary', 'primary_link', 'secondary', 'secondary_link', 'tertiary', \n                    'tertiary_link', 'residential', 'unclassified', 'road', 'service', 'pedestrian', 'raceway', 'living_street', 'construction')\n    AND name IS NOT NULL\n) AS roads_text_name",
        "type": "sqlite",
        "file": "test_db4.sqlite",
        "geometry_field": "way",
        "attachdb": "",
        "extent": ""
      },
      "extent": [
        -180,
        -85.05112877980659,
        180,
        85.05112877980659
      ],
      "properties": {
        "minzoom": 13
      },
      "advanced": {},
      "layerId": "roads-text-name"
    },
    {
      "geometry": "linestring",
      "class": "",
      "id": "paths-text-name",
      "srs-name": "WGS84",
      "srs": "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs",
      "Datasource": {
        "table": "(SELECT\n    id,way,\n    highway,\n    name\n  FROM lines\n  WHERE highway IN ('bridleway', 'footway', 'cycleway', 'path', 'track', 'steps')\n    AND name IS NOT NULL\n) AS paths_text_name",
        "type": "sqlite",
        "file": "test_db4.sqlite",
        "geometry_field": "way",
        "attachdb": "",
        "extent": ""
      },
      "extent": [
        -180,
        -85.05112877980659,
        180,
        85.05112877980659
      ],
      "properties": {
        "minzoom": 15
      },
      "advanced": {},
      "status": "off",
      "layerId": "paths-text-name"
    },
    {
      "geometry": "polygon",
      "class": "text-low-zoom",
      "id": "text-poly-low-zoom",
      "srs-name": "WGS84",
      "srs": "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs",
      "Datasource": {
        "table": "(SELECT\n    id,way,\n    way_area/NULLIF(CAST(!pixel_width! AS real)*CAST(!pixel_height! AS real0,0) AS way_pixels,\n    COALESCE(\n      'landuse_' || CASE WHEN landuse IN ('forest', 'military') THEN landuse ELSE NULL END,\n      'natural_' || CASE WHEN \"natural\" IN ('wood', 'glacier', 'sand', 'scree', 'shingle', 'bare_rock') THEN \"natural\" ELSE NULL END,\n      'place_' || CASE WHEN place IN ('island') THEN place ELSE NULL END,\n      'boundary_' || CASE WHEN boundary IN ('national_park') THEN boundary ELSE NULL END,\n      'leisure_' || CASE WHEN leisure IN ('nature_reserve') THEN leisure ELSE NULL END\n    ) AS feature,\n    name,\n    CASE WHEN building = 'no' OR building IS NULL THEN 'no' ELSE 'yes' END AS is_building -- always no with the where conditions\n  FROM polygons\n  WHERE (landuse IN ('forest', 'military')\n      OR \"natural\" IN ('wood', 'glacier', 'sand', 'scree', 'shingle', 'bare_rock')\n      OR \"place\" IN ('island')\n      OR boundary IN ('national_park')\n      OR leisure IN ('nature_reserve'))\n    AND building IS NULL\n    AND name IS NOT NULL\n  ORDER BY way_area DESC\n) AS text_poly_low_zoom",
        "type": "sqlite",
        "file": "test_db4.sqlite",
        "geometry_field": "way",
        "attachdb": "",
        "extent": ""
      },
      "extent": [
        -180,
        -85.05112877980659,
        180,
        85.05112877980659
      ],
      "properties": {
        "maxzoom": 9,
        "minzoom": 7
      },
      "advanced": {},
      "status": "off",
      "layerId": "text-poly-low-zoom"
    },
    {
      "geometry": "polygon",
      "class": "text",
      "id": "text-poly",
      "srs-name": "WGS84",
      "srs": "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs",
      "Datasource": {
        "table": "(SELECT\n    id,way,\n    way_area/NULLIF(CAST(!pixel_width! AS real)*CAST(!pixel_height! AS real0,0) AS way_pixels,\n    COALESCE(\n      'aeroway_' || CASE WHEN aeroway IN ('gate', 'apron', 'helipad', 'aerodrome') THEN aeroway ELSE NULL END,\n      'tourism_' || CASE WHEN tourism IN ('artwork', 'alpine_hut', 'hotel', 'motel', 'hostel', 'chalet', 'guest_house', 'camp_site', 'caravan_site', \n                                          'theme_park', 'museum', 'zoo', 'information', 'picnic_site') THEN tourism ELSE NULL END,\n      'amenity_' || CASE WHEN amenity IN ('pub', 'restaurant', 'food_court', 'cafe', 'fast_food', 'biergarten', 'bar', 'library', \n                                          'theatre', 'courthouse', 'townhall', 'cinema', 'clinic', 'community_centre', 'parking', \n                                          'bicycle_parking', 'motorcycle_parking', 'police', 'fire_station', 'fountain', 'place_of_worship', \n                                          'grave_yard', 'shelter', 'bank', 'embassy', 'fuel', 'bus_station', 'prison', 'university', \n                                          'school', 'college', 'kindergarten', 'hospital', 'ice_cream', 'pharmacy', 'doctors', 'dentist', \n                                          'atm', 'bicycle_rental', 'car_rental', 'car_wash', 'post_box', 'post_office',\n                                          'recycling', 'telephone', 'emergency_phone', 'toilets', 'taxi', 'drinking_water', 'hunting_stand', \n                                          'nightclub', 'veterinary', 'social_facility', 'charging_station') THEN amenity ELSE NULL END,\n      'shop_' || CASE WHEN shop IN ('supermarket', 'bag', 'bakery', 'beauty', 'books', 'butcher', 'clothes', 'computer', 'confectionery', \n                                    'fashion', 'convenience', 'department_store', 'doityourself', 'hardware', 'fishmonger', 'florist', 'garden_centre', \n                                    'hairdresser', 'hifi', 'ice_cream', 'car', 'car_repair', 'bicycle', 'mall', 'pet', 'photo', 'photo_studio', \n                                    'photography', 'seafood', 'shoes', 'alcohol', 'gift', 'furniture', 'kiosk', 'mobile_phone', 'motorcycle', \n                                    'musical_instrument', 'newsagent', 'optician', 'jewelry', 'jewellery', 'electronics', 'chemist', 'toys', \n                                    'travel_agency', 'car_parts', 'greengrocer', 'farm', 'stationery', 'laundry', 'dry_cleaning', 'beverages', \n                                    'perfumery', 'cosmetics', 'variety_store', 'wine', 'outdoor', 'copyshop', 'sports') THEN shop \n                      WHEN shop IN ('accessories', 'antiques', 'appliance', 'art', 'baby_goods', 'bathroom_furnishing', 'bed', \n                                    'boat', 'bookmaker', 'boutique', 'builder', 'building_materials', 'camera', 'car_service', 'carpet', 'charity', \n                                    'cheese', 'chocolate', 'coffee', 'communication', 'craft', 'curtain', 'dairy', 'deli', \n                                    'discount', 'e-cigarette', 'electrical', 'energy', 'erotic', 'estate_agent', 'fabric', 'fishing', \n                                    'flooring', 'food', 'frame', 'frozen_food', 'funeral_directors', 'furnace', 'gallery', 'games', 'gas', \n                                    'general', 'glaziery', 'grocery', 'health', 'health_food', 'hearing_aids', 'herbalist', 'hobby', 'household', \n                                    'houseware', 'hunting', 'interior_decoration', 'kitchen', 'leather', 'lighting', 'locksmith', \n                                    'lottery', 'market', 'massage', 'medical', 'medical_supply', 'money_lender', 'motorcycle_repair', 'music', \n                                    'office_supplies', 'organic', 'paint', 'pastry', 'pawnbroker', 'phone', 'pottery', \n                                    'printing', 'radiotechnics', 'real_estate', 'religion', 'rental', 'salon', 'scuba_diving', 'second_hand', \n                                    'sewing', 'shoe_repair', 'shopping_centre', 'solarium', 'souvenir', 'tailor', 'tanning', 'tattoo', 'tea', \n                                    'ticket', 'tiles', 'tobacco', 'trade', 'tyres', 'vacuum_cleaner', 'video', 'video_games', 'watches', 'wholesale', \n                                    'yes') THEN 'other' ELSE NULL END,\n      'leisure_' || CASE WHEN leisure IN ('swimming_pool', 'water_park', 'miniature_golf', 'golf_course', 'sports_centre', 'stadium', 'track', \n                                          'pitch', 'playground', 'park', 'recreation_ground', 'common', 'garden', 'nature_reserve', 'marina', \n                                          'picnic_table', 'dog_park') THEN leisure ELSE NULL END,\n      'power_' || CASE WHEN power IN ('plant', 'station', 'generator', 'sub_station', 'substation') THEN power ELSE NULL END,\n      'landuse_' || CASE WHEN landuse IN ('reservoir', 'basin', 'recreation_ground', 'village_green', 'quarry', 'vineyard', 'orchard', 'cemetery', \n                                          'residential', 'garages', 'meadow', 'grass', 'allotments', 'forest', 'farmyard', 'farm', 'farmland', \n                                          'greenhouse_horticulture', 'retail', 'industrial', 'railway', 'commercial', 'brownfield', 'landfill', \n                                          'construction', 'military') THEN landuse ELSE NULL END,\n      'man_made_' || CASE WHEN man_made IN ('lighthouse', 'windmill', 'mast', 'water_tower', 'pier', 'breakwater', 'groyne', 'obelisk') THEN man_made ELSE NULL END,\n      'natural_' || CASE WHEN \"natural\" IN ('wood', 'water', 'mud', 'wetland', 'marsh', 'bay', 'spring', 'scree', 'shingle', 'bare_rock', 'sand', 'heath', \n                                            'grassland', 'scrub', 'beach', 'shoal', 'reef', 'glacier') THEN \"natural\" ELSE NULL END,\n      'place_' || CASE WHEN place IN ('island', 'islet') THEN place ELSE NULL END,\n      'military_' || CASE WHEN military IN ('danger_area') THEN military ELSE NULL END,\n      'historic_' || CASE WHEN historic IN ('memorial', 'monument', 'archaeological_site') THEN historic ELSE NULL END,\n      'highway_' || CASE WHEN highway IN ('services', 'rest_area', 'bus_stop', 'elevator', 'ford') THEN highway ELSE NULL END,\n      'boundary_' || CASE WHEN boundary IN ('national_park') THEN boundary ELSE NULL END,\n      'waterway_' || CASE WHEN waterway IN ('dam') THEN waterway ELSE NULL END,\n      'tourism_' || CASE WHEN tourism IN ('viewpoint', 'attraction') THEN tourism ELSE NULL END\n    ) AS feature,\n    access,\n    name,\n    operator,\n    ref,\n    way_area,\n    CASE WHEN building = 'no' OR building IS NULL THEN 'no' ELSE 'yes' END AS is_building\n  FROM polygons\n  -- The upcoming where clause is needed for performance only, as the CASE statements would end up doing the equivalent filtering\n  WHERE (aeroway IN ('gate', 'apron', 'helipad', 'aerodrome')\n      OR tourism IN ('artwork', 'alpine_hut', 'hotel', 'motel', 'hostel', 'chalet', 'guest_house', 'camp_site', 'caravan_site', 'theme_park', \n                     'museum', 'viewpoint', 'attraction', 'zoo', 'information', 'picnic_site')\n      OR amenity IS NOT NULL -- skip checking a huge list and use a null check\n      OR shop IS NOT NULL\n      OR leisure IS NOT NULL\n      OR landuse IS NOT NULL\n      OR man_made IN ('lighthouse', 'windmill', 'mast', 'water_tower', 'pier', 'breakwater', 'groyne', 'obelisk')\n      OR \"natural\" IS NOT NULL\n      OR place IN ('island', 'islet')\n      OR military IN ('danger_area')\n      OR historic IN ('memorial', 'monument', 'archaeological_site')\n      OR highway IN ('services', 'rest_area', 'bus_stop', 'elevator', 'ford')\n      OR power IN ('plant', 'station', 'generator', 'sub_station', 'substation')\n      OR boundary IN ('national_park')\n      OR waterway = 'dam')\n    AND (name IS NOT NULL\n         OR (ref IS NOT NULL AND aeroway IN ('gate'))\n        )\n  ORDER BY way_area DESC\n) AS text_poly",
        "type": "sqlite",
        "file": "test_db4.sqlite",
        "geometry_field": "way",
        "attachdb": "",
        "extent": ""
      },
      "extent": [
        -180,
        -85.05112877980659,
        180,
        85.05112877980659
      ],
      "properties": {
        "minzoom": 10
      },
      "advanced": {},
      "status": "off",
      "layerId": "text-poly"
    },
    {
      "geometry": "linestring",
      "class": "",
      "id": "text-line",
      "srs-name": "WGS84",
      "srs": "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs",
      "Datasource": {
        "table": "(SELECT\n  id,way,\n    NULL as way_pixels,\n    COALESCE('man_made_' || man_made, 'waterway_' || waterway, 'natural_' || \"natural\") AS feature,\n    access,\n    name,\n    operator,\n    ref,\n    NULL AS way_area,\n    CASE WHEN building = 'no' OR building IS NULL THEN 'no' ELSE 'yes' END AS is_building\n  FROM lines\n  WHERE (man_made IN ('pier', 'breakwater', 'groyne', 'embankment')\n      OR waterway IN ('dam', 'weir')\n      OR \"natural\" IN ('cliff'))\n    AND name IS NOT NULL\n) AS text_line",
        "type": "sqlite",
        "file": "test_db4.sqlite",
        "geometry_field": "way",
        "attachdb": "",
        "extent": ""
      },
      "extent": [
        -180,
        -85.05112877980659,
        180,
        85.05112877980659
      ],
      "properties": {
        "minzoom": 10
      },
      "advanced": {},
      "layerId": "text-line"
    },
    {
      "geometry": "point",
      "class": "text",
      "id": "text-point",
      "srs-name": "WGS84",
      "srs": "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs",
      "Datasource": {
        "table": "(SELECT\n    id,way,\n    way_pixels,\n    feature,\n    access,\n    CONCAT(\n        name,\n        CASE WHEN name IS NOT NULL AND elevation IS NOT NULL THEN E'\\n' ELSE NULL END,\n        CASE WHEN elevation IS NOT NULL THEN CAST(CONCAT(REPLACE(ROUND(elevation) AS TEXT,) '-', U&'\\2212'), U&'\\00A0', 'm') ELSE NULL END\n    ) AS name,\n    CASE\n      WHEN \"natural\" IN ('peak', 'volcano', 'saddle') THEN elevation\n      ELSE NULL\n    END AS score,\n    operator,\n    ref,\n    way_area,\n    is_building\n  FROM\n    (SELECT\n        id,way,\n        NULL AS way_pixels,\n        COALESCE(\n          'aeroway_' || CASE WHEN aeroway IN ('gate', 'apron', 'helipad', 'aerodrome') THEN aeroway ELSE NULL END,\n          'tourism_' || CASE WHEN tourism IN ('artwork', 'alpine_hut', 'hotel', 'motel', 'hostel', 'chalet', 'guest_house', 'camp_site', 'caravan_site', \n                                              'theme_park', 'museum', 'zoo', 'information', 'picnic_site') THEN tourism ELSE NULL END,\n          'amenity_' || CASE WHEN amenity IN ('pub', 'restaurant', 'food_court', 'cafe', 'fast_food', 'biergarten', 'bar', 'library', 'theatre', \n                                              'courthouse', 'townhall', 'cinema', 'clinic', 'community_centre', 'parking', 'bicycle_parking', \n                                              'motorcycle_parking', 'police', 'fire_station', 'fountain', 'place_of_worship', 'grave_yard', 'shelter', 'bank', \n                                              'embassy', 'fuel', 'bus_station', 'prison', 'university', 'school', 'college', 'kindergarten', 'hospital', \n                                              'ice_cream', 'pharmacy', 'doctors', 'dentist', 'atm', 'bicycle_rental', 'car_rental',\n                                              'car_wash', 'post_box', 'post_office', 'recycling', 'telephone', 'emergency_phone', 'toilets', 'taxi', \n                                              'drinking_water', 'hunting_stand', 'nightclub', 'veterinary', 'social_facility',\n                                              'charging_station') THEN amenity ELSE NULL END,\n          'shop_' || CASE WHEN shop IN ('supermarket', 'bag','bakery', 'beauty', 'books', 'butcher', 'clothes', 'computer', 'confectionery', 'fashion', \n                                        'convenience', 'department_store', 'doityourself', 'hardware', 'fishmonger', 'florist', 'garden_centre', 'hairdresser', \n                                        'hifi', 'ice_cream', 'car', 'car_repair', 'bicycle', 'mall', 'pet', 'photo', 'photo_studio', 'photography', \n                                        'seafood', 'shoes', 'alcohol', 'gift', 'furniture', 'kiosk', 'mobile_phone', 'motorcycle', 'musical_instrument', \n                                        'newsagent', 'optician', 'jewelry', 'jewellery', 'electronics', 'chemist', 'toys', 'travel_agency', 'car_parts', \n                                        'greengrocer', 'farm', 'stationery', 'laundry', 'dry_cleaning', 'beverages', 'perfumery', 'cosmetics', \n                                        'variety_store', 'wine', 'outdoor', 'copyshop', 'sports') THEN shop \n                          WHEN shop IN ('accessories', 'antiques', 'appliance', 'art', \n                                        'baby_goods', 'bathroom_furnishing', 'bed', 'boat', 'bookmaker', 'boutique', 'builder', \n                                        'building_materials', 'camera', 'car_service', 'carpet', 'charity', 'cheese', 'chocolate', 'coffee', \n                                        'communication', 'craft', 'curtain', 'dairy', 'deli', 'discount',  \n                                        'e-cigarette', 'electrical', 'energy', 'erotic', 'estate_agent', 'fabric', 'fishing', 'flooring', \n                                        'food', 'frame', 'frozen_food', 'funeral_directors', 'furnace', 'gallery', 'games', 'gas', \n                                        'general', 'glaziery', 'grocery', 'health', 'health_food', 'hearing_aids', 'herbalist', 'hobby', 'household', \n                                        'houseware', 'hunting', 'interior_decoration', 'kitchen', 'leather', 'lighting', 'locksmith', \n                                        'lottery', 'market', 'massage', 'medical', 'medical_supply', 'money_lender', 'motorcycle_repair', 'music', \n                                        'office_supplies', 'organic', 'paint', 'pastry', 'pawnbroker', 'phone', 'pottery', \n                                        'printing', 'radiotechnics', 'real_estate', 'religion', 'rental', 'salon', 'scuba_diving', 'second_hand', \n                                        'sewing', 'shoe_repair', 'shopping_centre', 'solarium', 'souvenir', 'tailor', 'tanning', 'tattoo', \n                                        'tea', 'ticket', 'tiles', 'tobacco', 'trade', 'tyres', 'vacuum_cleaner', 'video', 'video_games', 'watches', \n                                        'wholesale', 'yes') THEN 'other' ELSE NULL END,\n          'leisure_' || CASE WHEN leisure IN ('swimming_pool', 'water_park', 'miniature_golf', 'golf_course', 'sports_centre', 'stadium', 'track',  \n                                              'pitch','playground', 'park', 'recreation_ground', 'common', 'garden', 'nature_reserve', 'marina',  \n                                              'slipway', 'picnic_table', 'dog_park') THEN leisure ELSE NULL END,\n          'power_' || CASE WHEN power IN ('plant', 'station', 'generator', 'sub_station', 'substation') THEN power ELSE NULL END,\n          'landuse_' || CASE WHEN landuse IN ('reservoir', 'basin', 'recreation_ground', 'village_green', 'quarry', 'vineyard', 'orchard', 'cemetery', \n                                              'residential', 'garages', 'meadow', 'grass', 'allotments', 'forest', 'farmyard', 'farm', 'farmland', \n                                              'greenhouse_horticulture', 'retail', 'industrial', 'railway', 'commercial', 'brownfield', 'landfill', \n                                              'construction', 'military') THEN landuse ELSE NULL END,\n          'man_made_' || CASE WHEN man_made IN ('lighthouse', 'windmill', 'mast', 'water_tower', 'obelisk') THEN man_made ELSE NULL END,\n          'natural_' || CASE WHEN \"natural\" IN ('wood', 'peak', 'volcano', 'saddle', 'cave_entrance', 'water', 'mud', 'wetland', 'marsh', 'bay', 'spring', \n                                                'scree', 'shingle', 'bare_rock', 'sand', 'heath', 'grassland', 'scrub', 'beach', 'glacier', 'tree') \n                                                THEN \"natural\" ELSE NULL END,\n          'place_' || CASE WHEN place IN ('island', 'islet') THEN place ELSE NULL END,\n          'military_' || CASE WHEN military IN ('danger_area') THEN military ELSE NULL END,\n          'historic_' || CASE WHEN historic IN ('memorial', 'monument', 'archaeological_site') THEN historic ELSE NULL END,\n          'highway_' || CASE WHEN highway IN ('services', 'rest_area', 'bus_stop', 'elevator', 'ford') THEN highway ELSE NULL END,\n          'boundary_' || CASE WHEN boundary IN ('national_park') THEN boundary ELSE NULL END,\n          'waterway_' || CASE WHEN waterway IN ('dam', 'weir') THEN waterway ELSE NULL END,\n          'tourism_' || CASE WHEN tourism IN ('viewpoint', 'attraction') THEN tourism ELSE NULL END,\n          'man_made_' || CASE WHEN man_made IN ('cross') THEN man_made ELSE NULL END,\n          'historic_' || CASE WHEN historic IN ('wayside_cross') THEN historic ELSE NULL END\n        ) AS feature,\n        access,\n        name,\n        CASE\n          WHEN \"natural\" IN ('peak', 'volcano', 'saddle') OR tourism = 'alpine_hut' OR amenity = 'shelter' THEN\n            CASE\n              WHEN ele  REGEXP  '^-?\\d{1,4}(\\.\\d+)?$' THEN CAST(ele AS NUMERIC)\n              ELSE NULL\n            END\n          ELSE NULL\n        END AS elevation,\n        \"natural\",\n        operator,\n        ref,\n        NULL AS way_area,\n        CASE WHEN building = 'no' OR building IS NULL THEN 'no' ELSE 'yes' END AS is_building\n      FROM points\n      -- The upcoming where clause is needed for performance only, as the CASE statements would end up doing the equivalent filtering\n      WHERE (aeroway IN ('gate', 'apron', 'helipad', 'aerodrome')\n          OR tourism IN ('artwork', 'alpine_hut', 'hotel', 'motel', 'hostel', 'chalet', 'guest_house', 'camp_site', 'caravan_site', 'theme_park', \n                         'museum', 'viewpoint', 'attraction', 'zoo', 'information', 'picnic_site')\n          OR amenity IS NOT NULL -- skip checking a huge list and use a null check\n          OR shop IS NOT NULL\n          OR leisure IS NOT NULL\n          OR landuse IN ('reservoir', 'basin', 'recreation_ground', 'village_green', 'quarry', 'vineyard', 'orchard', 'cemetery', 'residential', \n                         'garages', 'meadow', 'grass', 'allotments', 'forest', 'farmyard', 'farm', 'farmland', 'greenhouse_horticulture', \n                         'retail', 'industrial', 'railway', 'commercial', 'brownfield', 'landfill', 'construction', 'military')\n          OR man_made IN ('lighthouse', 'windmill', 'mast', 'water_tower', 'cross', 'obelisk')\n          OR \"natural\" IS NOT NULL\n          OR place IN ('island', 'islet')\n          OR military IN ('danger_area')\n          OR historic IN ('memorial', 'monument', 'archaeological_site', 'wayside_cross')\n          OR highway IN ('bus_stop', 'services', 'rest_area', 'elevator', 'ford')\n          OR power IN ('plant', 'station', 'generator', 'sub_station', 'substation')\n          OR boundary IN ('national_park')\n          OR waterway IN ('dam', 'weir'))\n        AND (name IS NOT NULL\n             OR (ele IS NOT NULL AND (\"natural\" IN ('peak', 'volcano', 'saddle') OR tourism = 'alpine_hut' OR amenity = 'shelter'))\n             OR (ref IS NOT NULL AND aeroway IN ('gate'))\n            )\n      ) AS p\n  ORDER BY score DESC NULLS LAST\n  ) AS text",
        "geometry_field": "way",
        "type": "sqlite",
        "file": "test_db4.sqlite",
        "extent": ""
      },
      "extent": [
        -180,
        -85.05112877980659,
        180,
        85.05112877980659
      ],
      "properties": {
        "minzoom": 10
      },
      "advanced": {},
      "status": "off",
      "layerId": "text-point"
    },
    {
      "geometry": "polygon",
      "class": "",
      "id": "building-text",
      "srs-name": "WGS84",
      "srs": "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs",
      "Datasource": {
        "table": "(SELECT\n    name,\n    id,way,\n    way_area/NULLIF(CAST(!pixel_width! AS real)*CAST(!pixel_height! AS real0,0) AS way_pixels\n  FROM polygons\n  WHERE building IS NOT NULL\n    AND building NOT IN ('no')\n    AND name IS NOT NULL\n  ORDER BY way_area DESC\n) AS building_text",
        "geometry_field": "way",
        "type": "sqlite",
        "file": "test_db4.sqlite",
        "extent": ""
      },
      "extent": [
        -180,
        -85.05112877980659,
        180,
        85.05112877980659
      ],
      "properties": {
        "minzoom": 14
      },
      "advanced": {},
      "status": "off",
      "layerId": "building-text"
    },
    {
      "geometry": "linestring",
      "class": "",
      "id": "interpolation",
      "srs-name": "WGS84",
      "srs": "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs",
      "Datasource": {
        "table": "(SELECT\n    way\n  FROM lines\n  WHERE \"addr:interpolation\" IS NOT NULL\n) AS interpolation",
        "geometry_field": "way",
        "type": "sqlite",
        "file": "test_db4.sqlite",
        "extent": ""
      },
      "extent": [
        -180,
        -85.05112877980659,
        180,
        85.05112877980659
      ],
      "properties": {
        "minzoom": 17
      },
      "advanced": {},
      "status": "off",
      "layerId": "interpolation"
    },
    {
      "geometry": "point",
      "class": "",
      "id": "housenumbers",
      "srs-name": "WGS84",
      "srs": "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs",
      "Datasource": {
        "table": "(SELECT\n    id,way,\n    \"addr:housenumber\",\n    way_area/NULLIF(CAST(!pixel_width! AS real)*CAST(!pixel_height! AS real0,0) AS way_pixels\n  FROM polygons\n  WHERE \"addr:housenumber\" IS NOT NULL\n    AND building IS NOT NULL\nUNION ALL\nSELECT\n    id,way,\n    \"addr:housenumber\",\n    NULL AS way_pixels\n  FROM points\n  WHERE \"addr:housenumber\" IS NOT NULL\n  ORDER BY way_pixels DESC NULLS LAST\n) AS housenumbers",
        "geometry_field": "way",
        "type": "sqlite",
        "file": "test_db4.sqlite",
        "extent": ""
      },
      "extent": [
        -180,
        -85.05112877980659,
        180,
        85.05112877980659
      ],
      "properties": {
        "minzoom": 17
      },
      "advanced": {},
      "status": "off",
      "layerId": "housenumbers"
    },
    {
      "geometry": "point",
      "class": "",
      "id": "housenames",
      "srs-name": "WGS84",
      "srs": "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs",
      "Datasource": {
        "table": "(SELECT\n    id,way,\n    \"addr:housename\",\n    way_area/NULLIF(CAST(!pixel_width! AS real)*CAST(!pixel_height! AS real),0) AS way_pixels\n  FROM polygons\n  WHERE \"addr:housename\" IS NOT NULL\n    AND building IS NOT NULL\nUNION ALL\nSELECT\n    id,way,\n    \"addr:housename\",\n    NULL AS way_pixels\n  FROM points WHERE \"addr:housename\" IS NOT NULL\nORDER BY way_pixels DESC NULLS LAST\n) AS housenames",
        "geometry_field": "way",
        "type": "sqlite",
        "file": "test_db4.sqlite",
        "extent": ""
      },
      "extent": [
        -180,
        -85.05112877980659,
        180,
        85.05112877980659
      ],
      "properties": {
        "minzoom": 17
      },
      "advanced": {},
      "status": "off",
      "layerId": "housenames"
    },
    {
      "geometry": "linestring",
      "class": "",
      "id": "water-lines-text",
      "srs-name": "WGS84",
      "srs": "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs",
      "Datasource": {
        "table": "(SELECT\n    id,way,\n    waterway,\n    lock,\n    name,\n    intermittent,\n    CASE WHEN tunnel IN ('yes', 'culvert') THEN 'yes' ELSE 'no' END AS int_tunnel\n  FROM lines\n  WHERE waterway IN ('river', 'canal', 'derelict_canal', 'stream', 'drain', 'ditch', 'wadi')\n    AND (tunnel IS NULL or tunnel != 'culvert')\n    AND name IS NOT NULL\n  ORDER BY z_order\n) AS water_lines_text",
        "geometry_field": "way",
        "type": "sqlite",
        "file": "test_db4.sqlite",
        "extent": ""
      },
      "extent": [
        -180,
        -85.05112877980659,
        180,
        85.05112877980659
      ],
      "properties": {
        "minzoom": 13
      },
      "advanced": {},
      "layerId": "water-lines-text"
    },
    {
      "geometry": "linestring",
      "class": "",
      "id": "ferry-routes-text",
      "srs-name": "WGS84",
      "srs": "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs",
      "Datasource": {
        "table": "(SELECT\n    id,way,\n    name\n  FROM lines\n  WHERE route = 'ferry'\n    AND name IS NOT NULL\n) AS ferry_routes_text",
        "geometry_field": "way",
        "type": "sqlite",
        "file": "test_db4.sqlite",
        "extent": ""
      },
      "extent": [
        -180,
        -85.05112877980659,
        180,
        85.05112877980659
      ],
      "properties": {
        "minzoom": 13
      },
      "advanced": {},
      "layerId": "ferry-routes-text"
    },
    {
      "geometry": "linestring",
      "class": "",
      "id": "admin-text",
      "srs-name": "WGS84",
      "srs": "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs",
      "Datasource": {
        "table": "(SELECT\n    id,way,\n    name,\n    admin_level\n  FROM polygons\n  WHERE boundary = 'administrative'\n    AND admin_level IN ('0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10')\n    AND name IS NOT NULL\n  ORDER BY CAST(admin_level AS integer) ASC, way_area DESC\n) AS admin_text",
        "geometry_field": "way",
        "type": "sqlite",
        "file": "test_db4.sqlite",
        "extent": ""
      },
      "extent": [
        -180,
        -85.05112877980659,
        180,
        85.05112877980659
      ],
      "properties": {
        "minzoom": 16
      },
      "advanced": {},
      "status": "off",
      "layerId": "admin-text"
    },
    {
      "geometry": "linestring",
      "class": "",
      "id": "nature-reserve-text",
      "srs-name": "WGS84",
      "srs": "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs",
      "Datasource": {
        "table": "(SELECT\n    id,way,\n    name,\n    way_area/NULLIF(CAST(!pixel_width! AS real)*CAST(!pixel_height! AS real),0) AS way_pixels\n  FROM polygons\n  WHERE (boundary = 'national_park' OR leisure = 'nature_reserve')\n    AND name IS NOT NULL\n) AS nature_reserve_text",
        "geometry_field": "way",
        "type": "sqlite",
        "file": "test_db4.sqlite",
        "extent": ""
      },
      "extent": [
        -180,
        -85.05112877980659,
        180,
        85.05112877980659
      ],
      "properties": {
        "minzoom": 13
      },
      "advanced": {},
      "status": "off",
      "layerId": "nature-reserve-text"
    },
    {
      "geometry": "point",
      "class": "amenity-low-priority",
      "id": "amenity-low-priority",
      "srs-name": "WGS84",
      "srs": "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs",
      "Datasource": {
        "table": "(SELECT\n    id,way,\n    COALESCE(\n      'highway_' || CASE WHEN highway IN ('mini_roundabout') THEN highway ELSE NULL END,\n      'railway_' || CASE WHEN railway IN ('level_crossing', 'crossing') THEN railway ELSE NULL END,\n      'amenity_' || CASE WHEN amenity IN ('parking', 'bicycle_parking', 'motorcycle_parking', 'bench', 'waste_basket') THEN amenity ELSE NULL END,\n      'historic_' || CASE WHEN historic IN ('wayside_cross') THEN historic ELSE NULL END,\n      'man_made_' || CASE WHEN man_made IN ('cross') THEN man_made ELSE NULL END,\n      'barrier_' || CASE WHEN barrier IN ('bollard', 'gate', 'lift_gate', 'swing_gate', 'block') THEN barrier ELSE NULL END\n    )  AS feature,\n    access,\n    CASE WHEN amenity='waste_basket' THEN 2 ELSE 1 END AS prio\n  FROM points p\n  WHERE highway IN ('mini_roundabout')\n     OR railway IN ('level_crossing', 'crossing')\n     OR amenity IN ('parking', 'bicycle_parking', 'motorcycle_parking', 'bench', 'waste_basket')\n     OR historic IN ('wayside_cross')\n     OR man_made IN ('cross')\n     OR barrier IN ('bollard', 'gate', 'lift_gate', 'swing_gate', 'block')\n  ORDER BY prio\n  ) AS amenity_low_priority",
        "geometry_field": "way",
        "type": "sqlite",
        "file": "test_db4.sqlite",
        "extent": ""
      },
      "extent": [
        -180,
        -85.05112877980659,
        180,
        85.05112877980659
      ],
      "properties": {
        "minzoom": 14
      },
      "advanced": {},
      "status": "off",
      "layerId": "amenity-low-priority"
    },
    {
      "geometry": "polygon",
      "class": "amenity-low-priority",
      "id": "amenity-low-priority-poly",
      "srs-name": "WGS84",
      "srs": "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs",
      "Datasource": {
        "table": "(SELECT\n    id,way,\n    COALESCE(\n      'amenity_' || CASE WHEN amenity IN ('parking', 'bicycle_parking', 'motorcycle_parking') THEN amenity ELSE NULL END,\n      'barrier_' || CASE WHEN barrier IN ('bollard', 'gate', 'lift_gate', 'swing_gate', 'block') THEN barrier ELSE NULL END\n    )  AS feature,\n    access\n  FROM polygons p\n  WHERE amenity IN ('parking', 'bicycle_parking', 'motorcycle_parking')\n     OR barrier IN ('bollard', 'gate', 'lift_gate', 'swing_gate', 'block')\n  ) AS amenity_low_priority_poly",
        "geometry_field": "way",
        "type": "sqlite",
        "file": "test_db4.sqlite",
        "extent": ""
      },
      "extent": [
        -180,
        -85.05112877980659,
        180,
        85.05112877980659
      ],
      "properties": {
        "minzoom": 14
      },
      "advanced": {},
      "status": "off",
      "layerId": "amenity-low-priority-poly"
    }
  ],
  "scale": 1,
  "metatile": 2,
  "description": "A general-purpose OpenStreetMap mapnik style, in CartoCSS"
}
